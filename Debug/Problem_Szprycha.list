
Problem_Szprycha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d64  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004e20  08004e20  00014e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f04  08004f04  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f0c  08004f0c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f0c  08004f0c  00014f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f10  08004f10  00014f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000068  08004f7c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08004f7c  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d841  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021cd  00000000  00000000  0002d914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  0002fae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e6  00000000  00000000  00030680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c3a  00000000  00000000  00030f66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e85f  00000000  00000000  0004aba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a253d  00000000  00000000  000593ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003030  00000000  00000000  000fb93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000fe96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004e08 	.word	0x08004e08

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08004e08 	.word	0x08004e08

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fb98 	bl	8000d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f83e 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f94e 	bl	80008dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000640:	f000 f936 	bl	80008b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000644:	f000 f8e6 	bl	8000814 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000648:	f000 f87e 	bl	8000748 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcVal, 10);
 800064c:	4915      	ldr	r1, [pc, #84]	; (80006a4 <main+0x74>)
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <main+0x78>)
 8000650:	220a      	movs	r2, #10
 8000652:	0018      	movs	r0, r3
 8000654:	f000 ff38 	bl	80014c8 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("ADC: %d, %d, %d \n\r", adcVal[0], adcVal[1], adcVal[3]);
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <main+0x74>)
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b29b      	uxth	r3, r3
 800065e:	0019      	movs	r1, r3
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <main+0x74>)
 8000662:	885b      	ldrh	r3, [r3, #2]
 8000664:	b29b      	uxth	r3, r3
 8000666:	001a      	movs	r2, r3
 8000668:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <main+0x74>)
 800066a:	88db      	ldrh	r3, [r3, #6]
 800066c:	b29b      	uxth	r3, r3
 800066e:	480f      	ldr	r0, [pc, #60]	; (80006ac <main+0x7c>)
 8000670:	f003 fd24 	bl	80040bc <iprintf>
	  HAL_Delay(100);
 8000674:	2064      	movs	r0, #100	; 0x64
 8000676:	f000 fbfd 	bl	8000e74 <HAL_Delay>
	  adcValTest = adcVal[0];
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <main+0x74>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <main+0x80>)
 8000682:	801a      	strh	r2, [r3, #0]
	  printf("AdcValTest: %d \n\r", adcValTest);
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <main+0x80>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	001a      	movs	r2, r3
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <main+0x84>)
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f003 fd14 	bl	80040bc <iprintf>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcVal, 10);
 8000694:	4903      	ldr	r1, [pc, #12]	; (80006a4 <main+0x74>)
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <main+0x78>)
 8000698:	220a      	movs	r2, #10
 800069a:	0018      	movs	r0, r3
 800069c:	f000 ff14 	bl	80014c8 <HAL_ADC_Start_DMA>
	  printf("ADC: %d, %d, %d \n\r", adcVal[0], adcVal[1], adcVal[3]);
 80006a0:	e7da      	b.n	8000658 <main+0x28>
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	200001d8 	.word	0x200001d8
 80006a8:	20000084 	.word	0x20000084
 80006ac:	08004e20 	.word	0x08004e20
 80006b0:	200001ec 	.word	0x200001ec
 80006b4:	08004e34 	.word	0x08004e34

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b093      	sub	sp, #76	; 0x4c
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	2410      	movs	r4, #16
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	0018      	movs	r0, r3
 80006c4:	2338      	movs	r3, #56	; 0x38
 80006c6:	001a      	movs	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f003 fd53 	bl	8004174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ce:	003b      	movs	r3, r7
 80006d0:	0018      	movs	r0, r3
 80006d2:	2310      	movs	r3, #16
 80006d4:	001a      	movs	r2, r3
 80006d6:	2100      	movs	r1, #0
 80006d8:	f003 fd4c 	bl	8004174 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 fe59 	bl	8002398 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2240      	movs	r2, #64	; 0x40
 80006fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	193b      	adds	r3, r7, r4
 8000708:	0018      	movs	r0, r3
 800070a:	f001 fe91 	bl	8002430 <HAL_RCC_OscConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000712:	f000 f947 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	003b      	movs	r3, r7
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071c:	003b      	movs	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	003b      	movs	r3, r7
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	003b      	movs	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800072e:	003b      	movs	r3, r7
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f002 f996 	bl	8002a64 <HAL_RCC_ClockConfig>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800073c:	f000 f932 	bl	80009a4 <Error_Handler>
  }
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	b013      	add	sp, #76	; 0x4c
 8000746:	bd90      	pop	{r4, r7, pc}

08000748 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	0018      	movs	r0, r3
 8000752:	230c      	movs	r3, #12
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f003 fd0c 	bl	8004174 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_ADC1_Init+0xc4>)
 800075e:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <MX_ADC1_Init+0xc8>)
 8000760:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_ADC1_Init+0xc4>)
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	05d2      	lsls	r2, r2, #23
 8000768:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_ADC1_Init+0xc4>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_ADC1_Init+0xc4>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b25      	ldr	r3, [pc, #148]	; (800080c <MX_ADC1_Init+0xc4>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_ADC1_Init+0xc4>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <MX_ADC1_Init+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000788:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_ADC1_Init+0xc4>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_ADC1_Init+0xc4>)
 8000790:	2201      	movs	r2, #1
 8000792:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_ADC1_Init+0xc4>)
 8000796:	2201      	movs	r2, #1
 8000798:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_ADC1_Init+0xc4>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_ADC1_Init+0xc4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADC1_Init+0xc4>)
 80007a8:	222c      	movs	r2, #44	; 0x2c
 80007aa:	2100      	movs	r1, #0
 80007ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ae:	4b17      	ldr	r3, [pc, #92]	; (800080c <MX_ADC1_Init+0xc4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007b4:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_ADC1_Init+0xc4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MX_ADC1_Init+0xc4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <MX_ADC1_Init+0xc4>)
 80007c2:	223c      	movs	r2, #60	; 0x3c
 80007c4:	2100      	movs	r1, #0
 80007c6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007c8:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_ADC1_Init+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC1_Init+0xc4>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fcd1 	bl	8001178 <HAL_ADC_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80007da:	f000 f8e3 	bl	80009a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2201      	movs	r2, #1
 80007e2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	1d3a      	adds	r2, r7, #4
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_ADC1_Init+0xc4>)
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 ff0c 	bl	8001614 <HAL_ADC_ConfigChannel>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000800:	f000 f8d0 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b004      	add	sp, #16
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000084 	.word	0x20000084
 8000810:	40012400 	.word	0x40012400

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800081a:	4a24      	ldr	r2, [pc, #144]	; (80008ac <MX_USART2_UART_Init+0x98>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000820:	22e1      	movs	r2, #225	; 0xe1
 8000822:	0252      	lsls	r2, r2, #9
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800084c:	2200      	movs	r2, #0
 800084e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800085e:	0018      	movs	r0, r3
 8000860:	f002 fc62 	bl	8003128 <HAL_UART_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000868:	f000 f89c 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 800086e:	2100      	movs	r1, #0
 8000870:	0018      	movs	r0, r3
 8000872:	f003 fa7f 	bl	8003d74 <HAL_UARTEx_SetTxFifoThreshold>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800087a:	f000 f893 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f003 fab6 	bl	8003df4 <HAL_UARTEx_SetRxFifoThreshold>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800088c:	f000 f88a 	bl	80009a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <MX_USART2_UART_Init+0x94>)
 8000892:	0018      	movs	r0, r3
 8000894:	f003 fa34 	bl	8003d00 <HAL_UARTEx_DisableFifoMode>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800089c:	f000 f882 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20000144 	.word	0x20000144
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_DMA_Init+0x28>)
 80008b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <MX_DMA_Init+0x28>)
 80008bc:	2101      	movs	r1, #1
 80008be:	430a      	orrs	r2, r1
 80008c0:	639a      	str	r2, [r3, #56]	; 0x38
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <MX_DMA_Init+0x28>)
 80008c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008c6:	2201      	movs	r2, #1
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	b002      	add	sp, #8
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	40021000 	.word	0x40021000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b089      	sub	sp, #36	; 0x24
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	240c      	movs	r4, #12
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	0018      	movs	r0, r3
 80008e8:	2314      	movs	r3, #20
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f003 fc41 	bl	8004174 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_GPIO_Init+0x9c>)
 80008f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_GPIO_Init+0x9c>)
 80008f8:	2104      	movs	r1, #4
 80008fa:	430a      	orrs	r2, r1
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_GPIO_Init+0x9c>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000902:	2204      	movs	r2, #4
 8000904:	4013      	ands	r3, r2
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_GPIO_Init+0x9c>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_GPIO_Init+0x9c>)
 8000910:	2120      	movs	r1, #32
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_GPIO_Init+0x9c>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091a:	2220      	movs	r2, #32
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_GPIO_Init+0x9c>)
 8000924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_GPIO_Init+0x9c>)
 8000928:	2101      	movs	r1, #1
 800092a:	430a      	orrs	r2, r1
 800092c:	635a      	str	r2, [r3, #52]	; 0x34
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_GPIO_Init+0x9c>)
 8000930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000932:	2201      	movs	r2, #1
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800093a:	23a0      	movs	r3, #160	; 0xa0
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	0018      	movs	r0, r3
 8000944:	f001 fd0a 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000948:	0021      	movs	r1, r4
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2220      	movs	r2, #32
 800094e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2201      	movs	r2, #1
 8000954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2202      	movs	r2, #2
 8000960:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000962:	187a      	adds	r2, r7, r1
 8000964:	23a0      	movs	r3, #160	; 0xa0
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fb92 	bl	8002094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b009      	add	sp, #36	; 0x24
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	40021000 	.word	0x40021000

0800097c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <__io_putchar+0x20>)
 8000986:	1d39      	adds	r1, r7, #4
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <__io_putchar+0x24>)
 800098a:	2201      	movs	r2, #1
 800098c:	f002 fc22 	bl	80031d4 <HAL_UART_Transmit>

  return ch;
 8000990:	687b      	ldr	r3, [r7, #4]
}
 8000992:	0018      	movs	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	b002      	add	sp, #8
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	0000ffff 	.word	0x0000ffff
 80009a0:	20000144 	.word	0x20000144

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_MspInit+0x4c>)
 80009b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_MspInit+0x4c>)
 80009bc:	2101      	movs	r1, #1
 80009be:	430a      	orrs	r2, r1
 80009c0:	641a      	str	r2, [r3, #64]	; 0x40
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	2201      	movs	r2, #1
 80009c8:	4013      	ands	r3, r2
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_MspInit+0x4c>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_MspInit+0x4c>)
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0549      	lsls	r1, r1, #21
 80009d8:	430a      	orrs	r2, r1
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <HAL_MspInit+0x4c>)
 80009de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	055b      	lsls	r3, r3, #21
 80009e4:	4013      	ands	r3, r2
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009ea:	23c0      	movs	r3, #192	; 0xc0
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 fa64 	bl	8000ebc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08b      	sub	sp, #44	; 0x2c
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	2414      	movs	r4, #20
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	2314      	movs	r3, #20
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f003 fbae 	bl	8004174 <memset>
  if(hadc->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a2d      	ldr	r2, [pc, #180]	; (8000ad4 <HAL_ADC_MspInit+0xd4>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d154      	bne.n	8000acc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <HAL_ADC_MspInit+0xd8>)
 8000a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <HAL_ADC_MspInit+0xd8>)
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0349      	lsls	r1, r1, #13
 8000a2c:	430a      	orrs	r2, r1
 8000a2e:	641a      	str	r2, [r3, #64]	; 0x40
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <HAL_ADC_MspInit+0xd8>)
 8000a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	035b      	lsls	r3, r3, #13
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <HAL_ADC_MspInit+0xd8>)
 8000a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a42:	4b25      	ldr	r3, [pc, #148]	; (8000ad8 <HAL_ADC_MspInit+0xd8>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	430a      	orrs	r2, r1
 8000a48:	635a      	str	r2, [r3, #52]	; 0x34
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <HAL_ADC_MspInit+0xd8>)
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2203      	movs	r2, #3
 8000a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	193a      	adds	r2, r7, r4
 8000a6a:	23a0      	movs	r3, #160	; 0xa0
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f001 fb0f 	bl	8002094 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000a78:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_ADC_MspInit+0xe0>)
 8000a7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000a7e:	2205      	movs	r2, #5
 8000a80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a82:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0052      	lsls	r2, r2, #1
 8000a9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	00d2      	lsls	r2, r2, #3
 8000aa2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f001 f94e 	bl	8001d54 <HAL_DMA_Init>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000abc:	f7ff ff72 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000ac4:	651a      	str	r2, [r3, #80]	; 0x50
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_ADC_MspInit+0xdc>)
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b00b      	add	sp, #44	; 0x2c
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	40012400 	.word	0x40012400
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	200000e8 	.word	0x200000e8
 8000ae0:	40020008 	.word	0x40020008

08000ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b097      	sub	sp, #92	; 0x5c
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	2344      	movs	r3, #68	; 0x44
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	0018      	movs	r0, r3
 8000af2:	2314      	movs	r3, #20
 8000af4:	001a      	movs	r2, r3
 8000af6:	2100      	movs	r1, #0
 8000af8:	f003 fb3c 	bl	8004174 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000afc:	2410      	movs	r4, #16
 8000afe:	193b      	adds	r3, r7, r4
 8000b00:	0018      	movs	r0, r3
 8000b02:	2334      	movs	r3, #52	; 0x34
 8000b04:	001a      	movs	r2, r3
 8000b06:	2100      	movs	r1, #0
 8000b08:	f003 fb34 	bl	8004174 <memset>
  if(huart->Instance==USART2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <HAL_UART_MspInit+0xb8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d13e      	bne.n	8000b94 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2202      	movs	r2, #2
 8000b1a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	0018      	movs	r0, r3
 8000b26:	f002 f947 	bl	8002db8 <HAL_RCCEx_PeriphCLKConfig>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b2e:	f7ff ff39 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	0289      	lsls	r1, r1, #10
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b44:	2380      	movs	r3, #128	; 0x80
 8000b46:	029b      	lsls	r3, r3, #10
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	430a      	orrs	r2, r1
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_UART_MspInit+0xbc>)
 8000b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b66:	2144      	movs	r1, #68	; 0x44
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2202      	movs	r2, #2
 8000b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2201      	movs	r2, #1
 8000b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2201      	movs	r2, #1
 8000b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	187a      	adds	r2, r7, r1
 8000b88:	23a0      	movs	r3, #160	; 0xa0
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 fa80 	bl	8002094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b017      	add	sp, #92	; 0x5c
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f938 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	60f8      	str	r0, [r7, #12]
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	e00a      	b.n	8000bfa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000be4:	e000      	b.n	8000be8 <_read+0x16>
 8000be6:	bf00      	nop
 8000be8:	0001      	movs	r1, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	60ba      	str	r2, [r7, #8]
 8000bf0:	b2ca      	uxtb	r2, r1
 8000bf2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	dbf0      	blt.n	8000be4 <_read+0x12>
  }

  return len;
 8000c02:	687b      	ldr	r3, [r7, #4]
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b006      	add	sp, #24
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	e009      	b.n	8000c32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	60ba      	str	r2, [r7, #8]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fea8 	bl	800097c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	617b      	str	r3, [r7, #20]
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dbf1      	blt.n	8000c1e <_write+0x12>
  }
  return len;
 8000c3a:	687b      	ldr	r3, [r7, #4]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b006      	add	sp, #24
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <_close>:

int _close(int file)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	425b      	negs	r3, r3
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	0192      	lsls	r2, r2, #6
 8000c68:	605a      	str	r2, [r3, #4]
  return 0;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	b002      	add	sp, #8
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <_isatty>:

int _isatty(int file)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b004      	add	sp, #16
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	18d3      	adds	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f003 faa8 	bl	8004220 <__errno>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	425b      	negs	r3, r3
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	18d2      	adds	r2, r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b006      	add	sp, #24
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20009000 	.word	0x20009000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	200001f0 	.word	0x200001f0
 8000d04:	20000348 	.word	0x20000348

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d18:	f7ff fff6 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d42:	f003 fa73 	bl	800422c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d46:	f7ff fc73 	bl	8000630 <main>

08000d4a <LoopForever>:

LoopForever:
  b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   r0, =_estack
 8000d4c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d58:	08004f14 	.word	0x08004f14
  ldr r2, =_sbss
 8000d5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d60:	20000344 	.word	0x20000344

08000d64 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC1_COMP_IRQHandler>
	...

08000d68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x3c>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_Init+0x3c>)
 8000d7a:	2180      	movs	r1, #128	; 0x80
 8000d7c:	0049      	lsls	r1, r1, #1
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f810 	bl	8000da8 <HAL_InitTick>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d003      	beq.n	8000d94 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	2201      	movs	r2, #1
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e001      	b.n	8000d98 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d94:	f7ff fe0c 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781b      	ldrb	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db0:	230f      	movs	r3, #15
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	2200      	movs	r2, #0
 8000db6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_InitTick+0x88>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d02b      	beq.n	8000e18 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_InitTick+0x8c>)
 8000dc2:	681c      	ldr	r4, [r3, #0]
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <HAL_InitTick+0x88>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	0019      	movs	r1, r3
 8000dca:	23fa      	movs	r3, #250	; 0xfa
 8000dcc:	0098      	lsls	r0, r3, #2
 8000dce:	f7ff f9a3 	bl	8000118 <__udivsi3>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0020      	movs	r0, r4
 8000dd8:	f7ff f99e 	bl	8000118 <__udivsi3>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f000 ffab 	bl	8001d3a <HAL_SYSTICK_Config>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d112      	bne.n	8000e0e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d80a      	bhi.n	8000e04 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	2301      	movs	r3, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	2200      	movs	r2, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 ff8a 	bl	8001d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_InitTick+0x90>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e00d      	b.n	8000e20 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2201      	movs	r2, #1
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e008      	b.n	8000e20 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0e:	230f      	movs	r3, #15
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	e003      	b.n	8000e20 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e20:	230f      	movs	r3, #15
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b005      	add	sp, #20
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000004 	.word	0x20000004

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	001a      	movs	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	18d2      	adds	r2, r2, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200001f4 	.word	0x200001f4

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	200001f4 	.word	0x200001f4

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fff0 	bl	8000e60 <HAL_GetTick>
 8000e80:	0003      	movs	r3, r0
 8000e82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001a      	movs	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	189b      	adds	r3, r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	f7ff ffe0 	bl	8000e60 <HAL_GetTick>
 8000ea0:	0002      	movs	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b004      	add	sp, #16
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000008 	.word	0x20000008

08000ebc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000eca:	4013      	ands	r3, r2
 8000ecc:	0019      	movs	r1, r3
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]
}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	fffff9ff 	.word	0xfffff9ff

08000ee8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a05      	ldr	r2, [pc, #20]	; (8000f0c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ef8:	401a      	ands	r2, r3
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	601a      	str	r2, [r3, #0]
}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b002      	add	sp, #8
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	fe3fffff 	.word	0xfe3fffff

08000f10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	23e0      	movs	r3, #224	; 0xe0
 8000f1e:	045b      	lsls	r3, r3, #17
 8000f20:	4013      	ands	r3, r2
}
 8000f22:	0018      	movs	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b002      	add	sp, #8
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	695b      	ldr	r3, [r3, #20]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	400a      	ands	r2, r1
 8000f40:	2107      	movs	r1, #7
 8000f42:	4091      	lsls	r1, r2
 8000f44:	000a      	movs	r2, r1
 8000f46:	43d2      	mvns	r2, r2
 8000f48:	401a      	ands	r2, r3
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	400b      	ands	r3, r1
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4099      	lsls	r1, r3
 8000f54:	000b      	movs	r3, r1
 8000f56:	431a      	orrs	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b004      	add	sp, #16
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	2104      	movs	r1, #4
 8000f76:	400a      	ands	r2, r1
 8000f78:	2107      	movs	r1, #7
 8000f7a:	4091      	lsls	r1, r2
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	2104      	movs	r1, #4
 8000f84:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f86:	40da      	lsrs	r2, r3
 8000f88:	0013      	movs	r3, r2
}
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	b002      	add	sp, #8
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	23c0      	movs	r3, #192	; 0xc0
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d101      	bne.n	8000faa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	0018      	movs	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	211f      	movs	r1, #31
 8000fc8:	400a      	ands	r2, r1
 8000fca:	210f      	movs	r1, #15
 8000fcc:	4091      	lsls	r1, r2
 8000fce:	000a      	movs	r2, r1
 8000fd0:	43d2      	mvns	r2, r2
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	0e9b      	lsrs	r3, r3, #26
 8000fd8:	210f      	movs	r1, #15
 8000fda:	4019      	ands	r1, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	201f      	movs	r0, #31
 8000fe0:	4003      	ands	r3, r0
 8000fe2:	4099      	lsls	r1, r3
 8000fe4:	000b      	movs	r3, r1
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	035b      	lsls	r3, r3, #13
 8001006:	0b5b      	lsrs	r3, r3, #13
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b002      	add	sp, #8
 8001014:	bd80      	pop	{r7, pc}

08001016 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	0352      	lsls	r2, r2, #13
 8001028:	0b52      	lsrs	r2, r2, #13
 800102a:	43d2      	mvns	r2, r2
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	0212      	lsls	r2, r2, #8
 8001050:	43d2      	mvns	r2, r2
 8001052:	401a      	ands	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	6879      	ldr	r1, [r7, #4]
 800105a:	400b      	ands	r3, r1
 800105c:	4904      	ldr	r1, [pc, #16]	; (8001070 <LL_ADC_SetChannelSamplingTime+0x34>)
 800105e:	400b      	ands	r3, r1
 8001060:	431a      	orrs	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b004      	add	sp, #16
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	07ffff00 	.word	0x07ffff00

08001074 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a05      	ldr	r2, [pc, #20]	; (8001098 <LL_ADC_EnableInternalRegulator+0x24>)
 8001082:	4013      	ands	r3, r2
 8001084:	2280      	movs	r2, #128	; 0x80
 8001086:	0552      	lsls	r2, r2, #21
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	6fffffe8 	.word	0x6fffffe8

0800109c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	055b      	lsls	r3, r3, #21
 80010ac:	401a      	ands	r2, r3
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	055b      	lsls	r3, r3, #21
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d101      	bne.n	80010ba <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <LL_ADC_Enable+0x20>)
 80010d2:	4013      	ands	r3, r2
 80010d4:	2201      	movs	r2, #1
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	7fffffe8 	.word	0x7fffffe8

080010e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <LL_ADC_Disable+0x20>)
 80010f6:	4013      	ands	r3, r2
 80010f8:	2202      	movs	r2, #2
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	7fffffe8 	.word	0x7fffffe8

0800110c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2201      	movs	r2, #1
 800111a:	4013      	ands	r3, r2
 800111c:	2b01      	cmp	r3, #1
 800111e:	d101      	bne.n	8001124 <LL_ADC_IsEnabled+0x18>
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <LL_ADC_IsEnabled+0x1a>
 8001124:	2300      	movs	r3, #0
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <LL_ADC_REG_StartConversion+0x20>)
 800113e:	4013      	ands	r3, r2
 8001140:	2204      	movs	r2, #4
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}
 8001150:	7fffffe8 	.word	0x7fffffe8

08001154 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2204      	movs	r2, #4
 8001162:	4013      	ands	r3, r2
 8001164:	2b04      	cmp	r3, #4
 8001166:	d101      	bne.n	800116c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800116c:	2300      	movs	r3, #0
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
	...

08001178 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001180:	231f      	movs	r3, #31
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001188:	2300      	movs	r3, #0
 800118a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e17f      	b.n	800149e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10a      	bne.n	80011bc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fc29 	bl	8000a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2254      	movs	r2, #84	; 0x54
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff ff6b 	bl	800109c <LL_ADC_IsInternalRegulatorEnabled>
 80011c6:	1e03      	subs	r3, r0, #0
 80011c8:	d115      	bne.n	80011f6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff ff50 	bl	8001074 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011d4:	4bb4      	ldr	r3, [pc, #720]	; (80014a8 <HAL_ADC_Init+0x330>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	49b4      	ldr	r1, [pc, #720]	; (80014ac <HAL_ADC_Init+0x334>)
 80011da:	0018      	movs	r0, r3
 80011dc:	f7fe ff9c 	bl	8000118 <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	3301      	adds	r3, #1
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011e8:	e002      	b.n	80011f0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f9      	bne.n	80011ea <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff ff4e 	bl	800109c <LL_ADC_IsInternalRegulatorEnabled>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d10f      	bne.n	8001224 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001208:	2210      	movs	r2, #16
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001214:	2201      	movs	r2, #1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800121c:	231f      	movs	r3, #31
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ff93 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 800122e:	0003      	movs	r3, r0
 8001230:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	2210      	movs	r2, #16
 8001238:	4013      	ands	r3, r2
 800123a:	d000      	beq.n	800123e <HAL_ADC_Init+0xc6>
 800123c:	e122      	b.n	8001484 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d000      	beq.n	8001246 <HAL_ADC_Init+0xce>
 8001244:	e11e      	b.n	8001484 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124a:	4a99      	ldr	r2, [pc, #612]	; (80014b0 <HAL_ADC_Init+0x338>)
 800124c:	4013      	ands	r3, r2
 800124e:	2202      	movs	r2, #2
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ff56 	bl	800110c <LL_ADC_IsEnabled>
 8001260:	1e03      	subs	r3, r0, #0
 8001262:	d000      	beq.n	8001266 <HAL_ADC_Init+0xee>
 8001264:	e0ad      	b.n	80013c2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	7e1b      	ldrb	r3, [r3, #24]
 800126e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001270:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	7e5b      	ldrb	r3, [r3, #25]
 8001276:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001278:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7e9b      	ldrb	r3, [r3, #26]
 800127e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001280:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_ADC_Init+0x118>
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	015b      	lsls	r3, r3, #5
 800128e:	e000      	b.n	8001292 <HAL_ADC_Init+0x11a>
 8001290:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001292:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001298:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da04      	bge.n	80012ac <HAL_ADC_Init+0x134>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	085b      	lsrs	r3, r3, #1
 80012aa:	e001      	b.n	80012b0 <HAL_ADC_Init+0x138>
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80012b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	212c      	movs	r1, #44	; 0x2c
 80012b6:	5c5b      	ldrb	r3, [r3, r1]
 80012b8:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012ba:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2220      	movs	r2, #32
 80012c6:	5c9b      	ldrb	r3, [r3, r2]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d115      	bne.n	80012f8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7e9b      	ldrb	r3, [r3, #26]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d105      	bne.n	80012e0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2280      	movs	r2, #128	; 0x80
 80012d8:	0252      	lsls	r2, r2, #9
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
 80012de:	e00b      	b.n	80012f8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e4:	2220      	movs	r2, #32
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f0:	2201      	movs	r2, #1
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00a      	beq.n	8001316 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001304:	23e0      	movs	r3, #224	; 0xe0
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800130e:	4313      	orrs	r3, r2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_ADC_Init+0x33c>)
 800131e:	4013      	ands	r3, r2
 8001320:	0019      	movs	r1, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	430a      	orrs	r2, r1
 800132a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	0f9b      	lsrs	r3, r3, #30
 8001332:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001338:	4313      	orrs	r3, r2
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4313      	orrs	r3, r2
 800133e:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	223c      	movs	r2, #60	; 0x3c
 8001344:	5c9b      	ldrb	r3, [r3, r2]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d111      	bne.n	800136e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	0f9b      	lsrs	r3, r3, #30
 8001350:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001356:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 800135c:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001362:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	4313      	orrs	r3, r2
 8001368:	2201      	movs	r2, #1
 800136a:	4313      	orrs	r3, r2
 800136c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_ADC_Init+0x340>)
 8001376:	4013      	ands	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	430a      	orrs	r2, r1
 8001382:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	23c0      	movs	r3, #192	; 0xc0
 800138a:	061b      	lsls	r3, r3, #24
 800138c:	429a      	cmp	r2, r3
 800138e:	d018      	beq.n	80013c2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	05db      	lsls	r3, r3, #23
 8001398:	429a      	cmp	r2, r3
 800139a:	d012      	beq.n	80013c2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013a0:	2380      	movs	r3, #128	; 0x80
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d00c      	beq.n	80013c2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013a8:	4b44      	ldr	r3, [pc, #272]	; (80014bc <HAL_ADC_Init+0x344>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a44      	ldr	r2, [pc, #272]	; (80014c0 <HAL_ADC_Init+0x348>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	0019      	movs	r1, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	23f0      	movs	r3, #240	; 0xf0
 80013b8:	039b      	lsls	r3, r3, #14
 80013ba:	401a      	ands	r2, r3
 80013bc:	4b3f      	ldr	r3, [pc, #252]	; (80014bc <HAL_ADC_Init+0x344>)
 80013be:	430a      	orrs	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ca:	001a      	movs	r2, r3
 80013cc:	2100      	movs	r1, #0
 80013ce:	f7ff fdac 	bl	8000f2a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	493a      	ldr	r1, [pc, #232]	; (80014c4 <HAL_ADC_Init+0x34c>)
 80013dc:	001a      	movs	r2, r3
 80013de:	f7ff fda4 	bl	8000f2a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2110      	movs	r1, #16
 80013f6:	4249      	negs	r1, r1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
 80013fc:	e018      	b.n	8001430 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	039b      	lsls	r3, r3, #14
 8001406:	429a      	cmp	r2, r3
 8001408:	d112      	bne.n	8001430 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	3b01      	subs	r3, #1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	221c      	movs	r2, #28
 800141a:	4013      	ands	r3, r2
 800141c:	2210      	movs	r2, #16
 800141e:	4252      	negs	r2, r2
 8001420:	409a      	lsls	r2, r3
 8001422:	0011      	movs	r1, r2
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2100      	movs	r1, #0
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff fd94 	bl	8000f64 <LL_ADC_GetSamplingTimeCommonChannels>
 800143c:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001442:	429a      	cmp	r2, r3
 8001444:	d10b      	bne.n	800145e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001450:	2203      	movs	r2, #3
 8001452:	4393      	bics	r3, r2
 8001454:	2201      	movs	r2, #1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800145c:	e01c      	b.n	8001498 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	2212      	movs	r2, #18
 8001464:	4393      	bics	r3, r2
 8001466:	2210      	movs	r2, #16
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001472:	2201      	movs	r2, #1
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800147a:	231f      	movs	r3, #31
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001482:	e009      	b.n	8001498 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	2210      	movs	r2, #16
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001490:	231f      	movs	r3, #31
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2201      	movs	r2, #1
 8001496:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001498:	231f      	movs	r3, #31
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	781b      	ldrb	r3, [r3, #0]
}
 800149e:	0018      	movs	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b008      	add	sp, #32
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	20000000 	.word	0x20000000
 80014ac:	00030d40 	.word	0x00030d40
 80014b0:	fffffefd 	.word	0xfffffefd
 80014b4:	ffde0201 	.word	0xffde0201
 80014b8:	1ffffc02 	.word	0x1ffffc02
 80014bc:	40012708 	.word	0x40012708
 80014c0:	ffc3ffff 	.word	0xffc3ffff
 80014c4:	07ffff04 	.word	0x07ffff04

080014c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff fe3b 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 80014de:	1e03      	subs	r3, r0, #0
 80014e0:	d16c      	bne.n	80015bc <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2254      	movs	r2, #84	; 0x54
 80014e6:	5c9b      	ldrb	r3, [r3, r2]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_ADC_Start_DMA+0x28>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e06c      	b.n	80015ca <HAL_ADC_Start_DMA+0x102>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2254      	movs	r2, #84	; 0x54
 80014f4:	2101      	movs	r1, #1
 80014f6:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2201      	movs	r2, #1
 8001500:	4013      	ands	r3, r2
 8001502:	d113      	bne.n	800152c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	0018      	movs	r0, r3
 800150a:	f7ff fdff 	bl	800110c <LL_ADC_IsEnabled>
 800150e:	1e03      	subs	r3, r0, #0
 8001510:	d004      	beq.n	800151c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff fde6 	bl	80010e8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2101      	movs	r1, #1
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800152c:	2517      	movs	r5, #23
 800152e:	197c      	adds	r4, r7, r5
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	0018      	movs	r0, r3
 8001534:	f000 fa46 	bl	80019c4 <ADC_Enable>
 8001538:	0003      	movs	r3, r0
 800153a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800153c:	002c      	movs	r4, r5
 800153e:	193b      	adds	r3, r7, r4
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d13e      	bne.n	80015c4 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <HAL_ADC_Start_DMA+0x10c>)
 800154c:	4013      	ands	r3, r2
 800154e:	2280      	movs	r2, #128	; 0x80
 8001550:	0052      	lsls	r2, r2, #1
 8001552:	431a      	orrs	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <HAL_ADC_Start_DMA+0x110>)
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800156a:	4a1c      	ldr	r2, [pc, #112]	; (80015dc <HAL_ADC_Start_DMA+0x114>)
 800156c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001572:	4a1b      	ldr	r2, [pc, #108]	; (80015e0 <HAL_ADC_Start_DMA+0x118>)
 8001574:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	221c      	movs	r2, #28
 800157c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2254      	movs	r2, #84	; 0x54
 8001582:	2100      	movs	r1, #0
 8001584:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2110      	movs	r1, #16
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3340      	adds	r3, #64	; 0x40
 80015a0:	0019      	movs	r1, r3
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	193c      	adds	r4, r7, r4
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f000 fc5e 	bl	8001e68 <HAL_DMA_Start_IT>
 80015ac:	0003      	movs	r3, r0
 80015ae:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff fdbb 	bl	8001130 <LL_ADC_REG_StartConversion>
 80015ba:	e003      	b.n	80015c4 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015bc:	2317      	movs	r3, #23
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	2202      	movs	r2, #2
 80015c2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80015c4:	2317      	movs	r3, #23
 80015c6:	18fb      	adds	r3, r7, r3
 80015c8:	781b      	ldrb	r3, [r3, #0]
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	b006      	add	sp, #24
 80015d0:	bdb0      	pop	{r4, r5, r7, pc}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	fffff0fe 	.word	0xfffff0fe
 80015d8:	08001ad1 	.word	0x08001ad1
 80015dc:	08001b99 	.word	0x08001b99
 80015e0:	08001bb7 	.word	0x08001bb7

080015e4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80015fc:	46c0      	nop			; (mov r8, r8)
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b002      	add	sp, #8
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161e:	2317      	movs	r3, #23
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2254      	movs	r2, #84	; 0x54
 800162e:	5c9b      	ldrb	r3, [r3, r2]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d101      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x24>
 8001634:	2302      	movs	r3, #2
 8001636:	e1c0      	b.n	80019ba <HAL_ADC_ConfigChannel+0x3a6>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2254      	movs	r2, #84	; 0x54
 800163c:	2101      	movs	r1, #1
 800163e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff fd85 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d000      	beq.n	8001650 <HAL_ADC_ConfigChannel+0x3c>
 800164e:	e1a3      	b.n	8001998 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d100      	bne.n	800165a <HAL_ADC_ConfigChannel+0x46>
 8001658:	e143      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691a      	ldr	r2, [r3, #16]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	429a      	cmp	r2, r3
 8001664:	d004      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800166a:	4ac1      	ldr	r2, [pc, #772]	; (8001970 <HAL_ADC_ConfigChannel+0x35c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d108      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0019      	movs	r1, r3
 800167a:	0010      	movs	r0, r2
 800167c:	f7ff fcba 	bl	8000ff4 <LL_ADC_REG_SetSequencerChAdd>
 8001680:	e0c9      	b.n	8001816 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	211f      	movs	r1, #31
 800168c:	400b      	ands	r3, r1
 800168e:	210f      	movs	r1, #15
 8001690:	4099      	lsls	r1, r3
 8001692:	000b      	movs	r3, r1
 8001694:	43db      	mvns	r3, r3
 8001696:	4013      	ands	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	035b      	lsls	r3, r3, #13
 80016a0:	0b5b      	lsrs	r3, r3, #13
 80016a2:	d105      	bne.n	80016b0 <HAL_ADC_ConfigChannel+0x9c>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0e9b      	lsrs	r3, r3, #26
 80016aa:	221f      	movs	r2, #31
 80016ac:	4013      	ands	r3, r2
 80016ae:	e098      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2201      	movs	r2, #1
 80016b6:	4013      	ands	r3, r2
 80016b8:	d000      	beq.n	80016bc <HAL_ADC_ConfigChannel+0xa8>
 80016ba:	e091      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x1cc>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2202      	movs	r2, #2
 80016c2:	4013      	ands	r3, r2
 80016c4:	d000      	beq.n	80016c8 <HAL_ADC_ConfigChannel+0xb4>
 80016c6:	e089      	b.n	80017dc <HAL_ADC_ConfigChannel+0x1c8>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2204      	movs	r2, #4
 80016ce:	4013      	ands	r3, r2
 80016d0:	d000      	beq.n	80016d4 <HAL_ADC_ConfigChannel+0xc0>
 80016d2:	e081      	b.n	80017d8 <HAL_ADC_ConfigChannel+0x1c4>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2208      	movs	r2, #8
 80016da:	4013      	ands	r3, r2
 80016dc:	d000      	beq.n	80016e0 <HAL_ADC_ConfigChannel+0xcc>
 80016de:	e079      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x1c0>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2210      	movs	r2, #16
 80016e6:	4013      	ands	r3, r2
 80016e8:	d000      	beq.n	80016ec <HAL_ADC_ConfigChannel+0xd8>
 80016ea:	e071      	b.n	80017d0 <HAL_ADC_ConfigChannel+0x1bc>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2220      	movs	r2, #32
 80016f2:	4013      	ands	r3, r2
 80016f4:	d000      	beq.n	80016f8 <HAL_ADC_ConfigChannel+0xe4>
 80016f6:	e069      	b.n	80017cc <HAL_ADC_ConfigChannel+0x1b8>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2240      	movs	r2, #64	; 0x40
 80016fe:	4013      	ands	r3, r2
 8001700:	d000      	beq.n	8001704 <HAL_ADC_ConfigChannel+0xf0>
 8001702:	e061      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x1b4>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2280      	movs	r2, #128	; 0x80
 800170a:	4013      	ands	r3, r2
 800170c:	d000      	beq.n	8001710 <HAL_ADC_ConfigChannel+0xfc>
 800170e:	e059      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x1b0>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4013      	ands	r3, r2
 800171a:	d151      	bne.n	80017c0 <HAL_ADC_ConfigChannel+0x1ac>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4013      	ands	r3, r2
 8001726:	d149      	bne.n	80017bc <HAL_ADC_ConfigChannel+0x1a8>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	4013      	ands	r3, r2
 8001732:	d141      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1a4>
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	011b      	lsls	r3, r3, #4
 800173c:	4013      	ands	r3, r2
 800173e:	d139      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1a0>
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	015b      	lsls	r3, r3, #5
 8001748:	4013      	ands	r3, r2
 800174a:	d131      	bne.n	80017b0 <HAL_ADC_ConfigChannel+0x19c>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	019b      	lsls	r3, r3, #6
 8001754:	4013      	ands	r3, r2
 8001756:	d129      	bne.n	80017ac <HAL_ADC_ConfigChannel+0x198>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	01db      	lsls	r3, r3, #7
 8001760:	4013      	ands	r3, r2
 8001762:	d121      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x194>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	4013      	ands	r3, r2
 800176e:	d119      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x190>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	4013      	ands	r3, r2
 800177a:	d111      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x18c>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	029b      	lsls	r3, r3, #10
 8001784:	4013      	ands	r3, r2
 8001786:	d109      	bne.n	800179c <HAL_ADC_ConfigChannel+0x188>
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	02db      	lsls	r3, r3, #11
 8001790:	4013      	ands	r3, r2
 8001792:	d001      	beq.n	8001798 <HAL_ADC_ConfigChannel+0x184>
 8001794:	2312      	movs	r3, #18
 8001796:	e024      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 8001798:	2300      	movs	r3, #0
 800179a:	e022      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 800179c:	2311      	movs	r3, #17
 800179e:	e020      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017a0:	2310      	movs	r3, #16
 80017a2:	e01e      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017a4:	230f      	movs	r3, #15
 80017a6:	e01c      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017a8:	230e      	movs	r3, #14
 80017aa:	e01a      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017ac:	230d      	movs	r3, #13
 80017ae:	e018      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017b0:	230c      	movs	r3, #12
 80017b2:	e016      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017b4:	230b      	movs	r3, #11
 80017b6:	e014      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017b8:	230a      	movs	r3, #10
 80017ba:	e012      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017bc:	2309      	movs	r3, #9
 80017be:	e010      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017c0:	2308      	movs	r3, #8
 80017c2:	e00e      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017c4:	2307      	movs	r3, #7
 80017c6:	e00c      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017c8:	2306      	movs	r3, #6
 80017ca:	e00a      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017cc:	2305      	movs	r3, #5
 80017ce:	e008      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017d0:	2304      	movs	r3, #4
 80017d2:	e006      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017d4:	2303      	movs	r3, #3
 80017d6:	e004      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017d8:	2302      	movs	r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1ce>
 80017e0:	2300      	movs	r3, #0
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	6852      	ldr	r2, [r2, #4]
 80017e6:	201f      	movs	r0, #31
 80017e8:	4002      	ands	r2, r0
 80017ea:	4093      	lsls	r3, r2
 80017ec:	000a      	movs	r2, r1
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	429a      	cmp	r2, r3
 8001802:	d808      	bhi.n	8001816 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	001a      	movs	r2, r3
 8001812:	f7ff fbcf 	bl	8000fb4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6818      	ldr	r0, [r3, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6819      	ldr	r1, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	001a      	movs	r2, r3
 8001824:	f7ff fc0a 	bl	800103c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db00      	blt.n	8001832 <HAL_ADC_ConfigChannel+0x21e>
 8001830:	e0bc      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001832:	4b50      	ldr	r3, [pc, #320]	; (8001974 <HAL_ADC_ConfigChannel+0x360>)
 8001834:	0018      	movs	r0, r3
 8001836:	f7ff fb6b 	bl	8000f10 <LL_ADC_GetCommonPathInternalCh>
 800183a:	0003      	movs	r3, r0
 800183c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a4d      	ldr	r2, [pc, #308]	; (8001978 <HAL_ADC_ConfigChannel+0x364>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d122      	bne.n	800188e <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001850:	d11d      	bne.n	800188e <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	2280      	movs	r2, #128	; 0x80
 8001856:	0412      	lsls	r2, r2, #16
 8001858:	4313      	orrs	r3, r2
 800185a:	4a46      	ldr	r2, [pc, #280]	; (8001974 <HAL_ADC_ConfigChannel+0x360>)
 800185c:	0019      	movs	r1, r3
 800185e:	0010      	movs	r0, r2
 8001860:	f7ff fb42 	bl	8000ee8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001864:	4b45      	ldr	r3, [pc, #276]	; (800197c <HAL_ADC_ConfigChannel+0x368>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4945      	ldr	r1, [pc, #276]	; (8001980 <HAL_ADC_ConfigChannel+0x36c>)
 800186a:	0018      	movs	r0, r3
 800186c:	f7fe fc54 	bl	8000118 <__udivsi3>
 8001870:	0003      	movs	r3, r0
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	0013      	movs	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	189b      	adds	r3, r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800187e:	e002      	b.n	8001886 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	3b01      	subs	r3, #1
 8001884:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f9      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800188c:	e08e      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a3c      	ldr	r2, [pc, #240]	; (8001984 <HAL_ADC_ConfigChannel+0x370>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d10e      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	045b      	lsls	r3, r3, #17
 800189e:	4013      	ands	r3, r2
 80018a0:	d109      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	2280      	movs	r2, #128	; 0x80
 80018a6:	0452      	lsls	r2, r2, #17
 80018a8:	4313      	orrs	r3, r2
 80018aa:	4a32      	ldr	r2, [pc, #200]	; (8001974 <HAL_ADC_ConfigChannel+0x360>)
 80018ac:	0019      	movs	r1, r3
 80018ae:	0010      	movs	r0, r2
 80018b0:	f7ff fb1a 	bl	8000ee8 <LL_ADC_SetCommonPathInternalCh>
 80018b4:	e07a      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a33      	ldr	r2, [pc, #204]	; (8001988 <HAL_ADC_ConfigChannel+0x374>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d000      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0x2ae>
 80018c0:	e074      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	03db      	lsls	r3, r3, #15
 80018c8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80018ca:	d000      	beq.n	80018ce <HAL_ADC_ConfigChannel+0x2ba>
 80018cc:	e06e      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	03d2      	lsls	r2, r2, #15
 80018d4:	4313      	orrs	r3, r2
 80018d6:	4a27      	ldr	r2, [pc, #156]	; (8001974 <HAL_ADC_ConfigChannel+0x360>)
 80018d8:	0019      	movs	r1, r3
 80018da:	0010      	movs	r0, r2
 80018dc:	f7ff fb04 	bl	8000ee8 <LL_ADC_SetCommonPathInternalCh>
 80018e0:	e064      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691a      	ldr	r2, [r3, #16]
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d004      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_ADC_ConfigChannel+0x35c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d107      	bne.n	8001908 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0019      	movs	r1, r3
 8001902:	0010      	movs	r0, r2
 8001904:	f7ff fb87 	bl	8001016 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	da4d      	bge.n	80019ac <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_ADC_ConfigChannel+0x360>)
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff fafc 	bl	8000f10 <LL_ADC_GetCommonPathInternalCh>
 8001918:	0003      	movs	r3, r0
 800191a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a15      	ldr	r2, [pc, #84]	; (8001978 <HAL_ADC_ConfigChannel+0x364>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d108      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4a18      	ldr	r2, [pc, #96]	; (800198c <HAL_ADC_ConfigChannel+0x378>)
 800192a:	4013      	ands	r3, r2
 800192c:	4a11      	ldr	r2, [pc, #68]	; (8001974 <HAL_ADC_ConfigChannel+0x360>)
 800192e:	0019      	movs	r1, r3
 8001930:	0010      	movs	r0, r2
 8001932:	f7ff fad9 	bl	8000ee8 <LL_ADC_SetCommonPathInternalCh>
 8001936:	e039      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <HAL_ADC_ConfigChannel+0x370>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d108      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	4a12      	ldr	r2, [pc, #72]	; (8001990 <HAL_ADC_ConfigChannel+0x37c>)
 8001946:	4013      	ands	r3, r2
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_ADC_ConfigChannel+0x360>)
 800194a:	0019      	movs	r1, r3
 800194c:	0010      	movs	r0, r2
 800194e:	f7ff facb 	bl	8000ee8 <LL_ADC_SetCommonPathInternalCh>
 8001952:	e02b      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <HAL_ADC_ConfigChannel+0x374>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d126      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <HAL_ADC_ConfigChannel+0x380>)
 8001962:	4013      	ands	r3, r2
 8001964:	4a03      	ldr	r2, [pc, #12]	; (8001974 <HAL_ADC_ConfigChannel+0x360>)
 8001966:	0019      	movs	r1, r3
 8001968:	0010      	movs	r0, r2
 800196a:	f7ff fabd 	bl	8000ee8 <LL_ADC_SetCommonPathInternalCh>
 800196e:	e01d      	b.n	80019ac <HAL_ADC_ConfigChannel+0x398>
 8001970:	80000004 	.word	0x80000004
 8001974:	40012708 	.word	0x40012708
 8001978:	b0001000 	.word	0xb0001000
 800197c:	20000000 	.word	0x20000000
 8001980:	00030d40 	.word	0x00030d40
 8001984:	b8004000 	.word	0xb8004000
 8001988:	b4002000 	.word	0xb4002000
 800198c:	ff7fffff 	.word	0xff7fffff
 8001990:	feffffff 	.word	0xfeffffff
 8001994:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	2220      	movs	r2, #32
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019a4:	2317      	movs	r3, #23
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	2201      	movs	r2, #1
 80019aa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2254      	movs	r2, #84	; 0x54
 80019b0:	2100      	movs	r1, #0
 80019b2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80019b4:	2317      	movs	r3, #23
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	781b      	ldrb	r3, [r3, #0]
}
 80019ba:	0018      	movs	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	b006      	add	sp, #24
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)

080019c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7ff fb99 	bl	800110c <LL_ADC_IsEnabled>
 80019da:	1e03      	subs	r3, r0, #0
 80019dc:	d000      	beq.n	80019e0 <ADC_Enable+0x1c>
 80019de:	e069      	b.n	8001ab4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4a36      	ldr	r2, [pc, #216]	; (8001ac0 <ADC_Enable+0xfc>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	2210      	movs	r2, #16
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	2201      	movs	r2, #1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e056      	b.n	8001ab6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff fb59 	bl	80010c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <ADC_Enable+0x100>)
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7ff fa7b 	bl	8000f10 <LL_ADC_GetCommonPathInternalCh>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	4013      	ands	r3, r2
 8001a22:	d00f      	beq.n	8001a44 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <ADC_Enable+0x104>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4928      	ldr	r1, [pc, #160]	; (8001acc <ADC_Enable+0x108>)
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7fe fb74 	bl	8000118 <__udivsi3>
 8001a30:	0003      	movs	r3, r0
 8001a32:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001a34:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a36:	e002      	b.n	8001a3e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f9      	bne.n	8001a38 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e5b      	ldrb	r3, [r3, #25]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d033      	beq.n	8001ab4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa08 	bl	8000e60 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a54:	e027      	b.n	8001aa6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff fb56 	bl	800110c <LL_ADC_IsEnabled>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d104      	bne.n	8001a6e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fb2b 	bl	80010c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a6e:	f7ff f9f7 	bl	8000e60 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d914      	bls.n	8001aa6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2201      	movs	r2, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d00d      	beq.n	8001aa6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	2210      	movs	r2, #16
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e007      	b.n	8001ab6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d1d0      	bne.n	8001a56 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b004      	add	sp, #16
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	80000017 	.word	0x80000017
 8001ac4:	40012708 	.word	0x40012708
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	00030d40 	.word	0x00030d40

08001ad0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	2250      	movs	r2, #80	; 0x50
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d141      	bne.n	8001b6c <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f7ff fa49 	bl	8000f92 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b00:	1e03      	subs	r3, r0, #0
 8001b02:	d02e      	beq.n	8001b62 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	7e9b      	ldrb	r3, [r3, #26]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d12a      	bne.n	8001b62 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2208      	movs	r2, #8
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d123      	bne.n	8001b62 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff fb18 	bl	8001154 <LL_ADC_REG_IsConversionOngoing>
 8001b24:	1e03      	subs	r3, r0, #0
 8001b26:	d110      	bne.n	8001b4a <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	210c      	movs	r1, #12
 8001b34:	438a      	bics	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	4a15      	ldr	r2, [pc, #84]	; (8001b94 <ADC_DMAConvCplt+0xc4>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2201      	movs	r2, #1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	659a      	str	r2, [r3, #88]	; 0x58
 8001b48:	e00b      	b.n	8001b62 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	2220      	movs	r2, #32
 8001b50:	431a      	orrs	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff fd3d 	bl	80015e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b6a:	e00f      	b.n	8001b8c <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	2210      	movs	r2, #16
 8001b72:	4013      	ands	r3, r2
 8001b74:	d004      	beq.n	8001b80 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7ff fd43 	bl	8001604 <HAL_ADC_ErrorCallback>
}
 8001b7e:	e005      	b.n	8001b8c <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	0010      	movs	r0, r2
 8001b8a:	4798      	blx	r3
}
 8001b8c:	46c0      	nop			; (mov r8, r8)
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	b004      	add	sp, #16
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	fffffefe 	.word	0xfffffefe

08001b98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff fd23 	bl	80015f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7ff fd10 	bl	8001604 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	b004      	add	sp, #16
 8001bea:	bd80      	pop	{r7, pc}

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8001c00:	d828      	bhi.n	8001c54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c02:	4a2f      	ldr	r2, [pc, #188]	; (8001cc0 <__NVIC_SetPriority+0xd4>)
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	33c0      	adds	r3, #192	; 0xc0
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	589b      	ldr	r3, [r3, r2]
 8001c12:	1dfa      	adds	r2, r7, #7
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	0011      	movs	r1, r2
 8001c18:	2203      	movs	r2, #3
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	00d2      	lsls	r2, r2, #3
 8001c1e:	21ff      	movs	r1, #255	; 0xff
 8001c20:	4091      	lsls	r1, r2
 8001c22:	000a      	movs	r2, r1
 8001c24:	43d2      	mvns	r2, r2
 8001c26:	401a      	ands	r2, r3
 8001c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	22ff      	movs	r2, #255	; 0xff
 8001c30:	401a      	ands	r2, r3
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	0018      	movs	r0, r3
 8001c38:	2303      	movs	r3, #3
 8001c3a:	4003      	ands	r3, r0
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c40:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <__NVIC_SetPriority+0xd4>)
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	33c0      	adds	r3, #192	; 0xc0
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c52:	e031      	b.n	8001cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <__NVIC_SetPriority+0xd8>)
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	400b      	ands	r3, r1
 8001c60:	3b08      	subs	r3, #8
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3306      	adds	r3, #6
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	18d3      	adds	r3, r2, r3
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	1dfa      	adds	r2, r7, #7
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	0011      	movs	r1, r2
 8001c74:	2203      	movs	r2, #3
 8001c76:	400a      	ands	r2, r1
 8001c78:	00d2      	lsls	r2, r2, #3
 8001c7a:	21ff      	movs	r1, #255	; 0xff
 8001c7c:	4091      	lsls	r1, r2
 8001c7e:	000a      	movs	r2, r1
 8001c80:	43d2      	mvns	r2, r2
 8001c82:	401a      	ands	r2, r3
 8001c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	22ff      	movs	r2, #255	; 0xff
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	0018      	movs	r0, r3
 8001c94:	2303      	movs	r3, #3
 8001c96:	4003      	ands	r3, r0
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <__NVIC_SetPriority+0xd8>)
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	001c      	movs	r4, r3
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	4023      	ands	r3, r4
 8001ca8:	3b08      	subs	r3, #8
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	430a      	orrs	r2, r1
 8001cae:	3306      	adds	r3, #6
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	18c3      	adds	r3, r0, r3
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b003      	add	sp, #12
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	045b      	lsls	r3, r3, #17
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d301      	bcc.n	8001ce0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e010      	b.n	8001d02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <SysTick_Config+0x44>)
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce8:	2301      	movs	r3, #1
 8001cea:	425b      	negs	r3, r3
 8001cec:	2103      	movs	r1, #3
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff ff7c 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x44>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x44>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	1c02      	adds	r2, r0, #0
 8001d20:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	0011      	movs	r1, r2
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff ffbf 	bl	8001cc8 <SysTick_Config>
 8001d4a:	0003      	movs	r3, r0
}
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e077      	b.n	8001e56 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3d      	ldr	r2, [pc, #244]	; (8001e60 <HAL_DMA_Init+0x10c>)
 8001d6c:	4694      	mov	ip, r2
 8001d6e:	4463      	add	r3, ip
 8001d70:	2114      	movs	r1, #20
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe f9d0 	bl	8000118 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	009a      	lsls	r2, r3, #2
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2225      	movs	r2, #37	; 0x25
 8001d84:	2102      	movs	r1, #2
 8001d86:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4934      	ldr	r1, [pc, #208]	; (8001e64 <HAL_DMA_Init+0x110>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f90f 	bl	8001ff4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	01db      	lsls	r3, r3, #7
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d102      	bne.n	8001de8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	213f      	movs	r1, #63	; 0x3f
 8001df2:	400a      	ands	r2, r1
 8001df4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dfe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d011      	beq.n	8001e2c <HAL_DMA_Init+0xd8>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d80d      	bhi.n	8001e2c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f91a 	bl	800204c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	e008      	b.n	8001e3e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2225      	movs	r2, #37	; 0x25
 8001e48:	2101      	movs	r1, #1
 8001e4a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2224      	movs	r2, #36	; 0x24
 8001e50:	2100      	movs	r1, #0
 8001e52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b002      	add	sp, #8
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	bffdfff8 	.word	0xbffdfff8
 8001e64:	ffff800f 	.word	0xffff800f

08001e68 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e76:	2317      	movs	r3, #23
 8001e78:	18fb      	adds	r3, r7, r3
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2224      	movs	r2, #36	; 0x24
 8001e82:	5c9b      	ldrb	r3, [r3, r2]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_DMA_Start_IT+0x24>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e06f      	b.n	8001f6c <HAL_DMA_Start_IT+0x104>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	2101      	movs	r1, #1
 8001e92:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2225      	movs	r2, #37	; 0x25
 8001e98:	5c9b      	ldrb	r3, [r3, r2]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d157      	bne.n	8001f50 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2225      	movs	r2, #37	; 0x25
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	438a      	bics	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f000 f855 	bl	8001f74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	210e      	movs	r1, #14
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e00f      	b.n	8001f04 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2104      	movs	r1, #4
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	210a      	movs	r1, #10
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	025b      	lsls	r3, r3, #9
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d008      	beq.n	8001f24 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0049      	lsls	r1, r1, #1
 8001f20:	430a      	orrs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	0049      	lsls	r1, r1, #1
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e00a      	b.n	8001f66 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2280      	movs	r2, #128	; 0x80
 8001f54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2224      	movs	r2, #36	; 0x24
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001f5e:	2317      	movs	r3, #23
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001f66:	2317      	movs	r3, #23
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b006      	add	sp, #24
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f8a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <DMA_SetConfig+0x7c>)
 8001fa0:	6859      	ldr	r1, [r3, #4]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	221c      	movs	r2, #28
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2201      	movs	r2, #1
 8001fac:	409a      	lsls	r2, r3
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <DMA_SetConfig+0x7c>)
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d108      	bne.n	8001fd6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fd4:	e007      	b.n	8001fe6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	60da      	str	r2, [r3, #12]
}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	40020000 	.word	0x40020000

08001ff4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	089b      	lsrs	r3, r3, #2
 8002002:	4a10      	ldr	r2, [pc, #64]	; (8002044 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002004:	4694      	mov	ip, r2
 8002006:	4463      	add	r3, ip
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	001a      	movs	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	001a      	movs	r2, r3
 8002016:	23ff      	movs	r3, #255	; 0xff
 8002018:	4013      	ands	r3, r2
 800201a:	3b08      	subs	r3, #8
 800201c:	2114      	movs	r1, #20
 800201e:	0018      	movs	r0, r3
 8002020:	f7fe f87a 	bl	8000118 <__udivsi3>
 8002024:	0003      	movs	r3, r0
 8002026:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a07      	ldr	r2, [pc, #28]	; (8002048 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800202c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	221f      	movs	r2, #31
 8002032:	4013      	ands	r3, r2
 8002034:	2201      	movs	r2, #1
 8002036:	409a      	lsls	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800203c:	46c0      	nop			; (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b004      	add	sp, #16
 8002042:	bd80      	pop	{r7, pc}
 8002044:	10008200 	.word	0x10008200
 8002048:	40020880 	.word	0x40020880

0800204c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	223f      	movs	r2, #63	; 0x3f
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002062:	4694      	mov	ip, r2
 8002064:	4463      	add	r3, ip
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	001a      	movs	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002072:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3b01      	subs	r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	4013      	ands	r3, r2
 800207c:	2201      	movs	r2, #1
 800207e:	409a      	lsls	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b004      	add	sp, #16
 800208a:	bd80      	pop	{r7, pc}
 800208c:	1000823f 	.word	0x1000823f
 8002090:	40020940 	.word	0x40020940

08002094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	e147      	b.n	8002334 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2101      	movs	r1, #1
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4091      	lsls	r1, r2
 80020ae:	000a      	movs	r2, r1
 80020b0:	4013      	ands	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d100      	bne.n	80020bc <HAL_GPIO_Init+0x28>
 80020ba:	e138      	b.n	800232e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2203      	movs	r2, #3
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d005      	beq.n	80020d4 <HAL_GPIO_Init+0x40>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2203      	movs	r2, #3
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d130      	bne.n	8002136 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	409a      	lsls	r2, r3
 80020e2:	0013      	movs	r3, r2
 80020e4:	43da      	mvns	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	409a      	lsls	r2, r3
 80020f6:	0013      	movs	r3, r2
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800210a:	2201      	movs	r2, #1
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
 8002110:	0013      	movs	r3, r2
 8002112:	43da      	mvns	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4013      	ands	r3, r2
 8002118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	2201      	movs	r2, #1
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2203      	movs	r2, #3
 800213c:	4013      	ands	r3, r2
 800213e:	2b03      	cmp	r3, #3
 8002140:	d017      	beq.n	8002172 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	409a      	lsls	r2, r3
 8002150:	0013      	movs	r3, r2
 8002152:	43da      	mvns	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2203      	movs	r2, #3
 8002178:	4013      	ands	r3, r2
 800217a:	2b02      	cmp	r3, #2
 800217c:	d123      	bne.n	80021c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	08da      	lsrs	r2, r3, #3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3208      	adds	r2, #8
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	58d3      	ldr	r3, [r2, r3]
 800218a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	2207      	movs	r2, #7
 8002190:	4013      	ands	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	220f      	movs	r2, #15
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	43da      	mvns	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4013      	ands	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2107      	movs	r1, #7
 80021aa:	400b      	ands	r3, r1
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	08da      	lsrs	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3208      	adds	r2, #8
 80021c0:	0092      	lsls	r2, r2, #2
 80021c2:	6939      	ldr	r1, [r7, #16]
 80021c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2203      	movs	r2, #3
 80021e4:	401a      	ands	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	23c0      	movs	r3, #192	; 0xc0
 8002200:	029b      	lsls	r3, r3, #10
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_GPIO_Init+0x174>
 8002206:	e092      	b.n	800232e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002208:	4a50      	ldr	r2, [pc, #320]	; (800234c <HAL_GPIO_Init+0x2b8>)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	3318      	adds	r3, #24
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	589b      	ldr	r3, [r3, r2]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2203      	movs	r2, #3
 800221a:	4013      	ands	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	220f      	movs	r2, #15
 8002220:	409a      	lsls	r2, r3
 8002222:	0013      	movs	r3, r2
 8002224:	43da      	mvns	r2, r3
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	23a0      	movs	r3, #160	; 0xa0
 8002230:	05db      	lsls	r3, r3, #23
 8002232:	429a      	cmp	r2, r3
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x1ca>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a45      	ldr	r2, [pc, #276]	; (8002350 <HAL_GPIO_Init+0x2bc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x1c6>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a44      	ldr	r2, [pc, #272]	; (8002354 <HAL_GPIO_Init+0x2c0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x1c2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a43      	ldr	r2, [pc, #268]	; (8002358 <HAL_GPIO_Init+0x2c4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x1be>
 800224e:	2303      	movs	r3, #3
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x1cc>
 8002252:	2305      	movs	r3, #5
 8002254:	e004      	b.n	8002260 <HAL_GPIO_Init+0x1cc>
 8002256:	2302      	movs	r3, #2
 8002258:	e002      	b.n	8002260 <HAL_GPIO_Init+0x1cc>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x1cc>
 800225e:	2300      	movs	r3, #0
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	2103      	movs	r1, #3
 8002264:	400a      	ands	r2, r1
 8002266:	00d2      	lsls	r2, r2, #3
 8002268:	4093      	lsls	r3, r2
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002270:	4936      	ldr	r1, [pc, #216]	; (800234c <HAL_GPIO_Init+0x2b8>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3318      	adds	r3, #24
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800227e:	4b33      	ldr	r3, [pc, #204]	; (800234c <HAL_GPIO_Init+0x2b8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43da      	mvns	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	035b      	lsls	r3, r3, #13
 8002296:	4013      	ands	r3, r2
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_GPIO_Init+0x2b8>)
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <HAL_GPIO_Init+0x2b8>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	43da      	mvns	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	039b      	lsls	r3, r3, #14
 80022c0:	4013      	ands	r3, r2
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <HAL_GPIO_Init+0x2b8>)
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <HAL_GPIO_Init+0x2b8>)
 80022d4:	2384      	movs	r3, #132	; 0x84
 80022d6:	58d3      	ldr	r3, [r2, r3]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	43da      	mvns	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	029b      	lsls	r3, r3, #10
 80022ec:	4013      	ands	r3, r2
 80022ee:	d003      	beq.n	80022f8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f8:	4914      	ldr	r1, [pc, #80]	; (800234c <HAL_GPIO_Init+0x2b8>)
 80022fa:	2284      	movs	r2, #132	; 0x84
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002300:	4a12      	ldr	r2, [pc, #72]	; (800234c <HAL_GPIO_Init+0x2b8>)
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	58d3      	ldr	r3, [r2, r3]
 8002306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	43da      	mvns	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	025b      	lsls	r3, r3, #9
 800231a:	4013      	ands	r3, r2
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002326:	4909      	ldr	r1, [pc, #36]	; (800234c <HAL_GPIO_Init+0x2b8>)
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3301      	adds	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	40da      	lsrs	r2, r3
 800233c:	1e13      	subs	r3, r2, #0
 800233e:	d000      	beq.n	8002342 <HAL_GPIO_Init+0x2ae>
 8002340:	e6b0      	b.n	80020a4 <HAL_GPIO_Init+0x10>
  }
}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b006      	add	sp, #24
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021800 	.word	0x40021800
 8002350:	50000400 	.word	0x50000400
 8002354:	50000800 	.word	0x50000800
 8002358:	50000c00 	.word	0x50000c00

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	0008      	movs	r0, r1
 8002366:	0011      	movs	r1, r2
 8002368:	1cbb      	adds	r3, r7, #2
 800236a:	1c02      	adds	r2, r0, #0
 800236c:	801a      	strh	r2, [r3, #0]
 800236e:	1c7b      	adds	r3, r7, #1
 8002370:	1c0a      	adds	r2, r1, #0
 8002372:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002374:	1c7b      	adds	r3, r7, #1
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800237c:	1cbb      	adds	r3, r7, #2
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002384:	e003      	b.n	800238e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002386:	1cbb      	adds	r3, r7, #2
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800238e:	46c0      	nop			; (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b002      	add	sp, #8
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	0019      	movs	r1, r3
 80023aa:	4b17      	ldr	r3, [pc, #92]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d11f      	bne.n	80023fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	0013      	movs	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	189b      	adds	r3, r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4912      	ldr	r1, [pc, #72]	; (8002414 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fd fea4 	bl	8000118 <__udivsi3>
 80023d0:	0003      	movs	r3, r0
 80023d2:	3301      	adds	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d6:	e008      	b.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e001      	b.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e009      	b.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	401a      	ands	r2, r3
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d0ed      	beq.n	80023d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	0018      	movs	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	b004      	add	sp, #16
 8002404:	bd80      	pop	{r7, pc}
 8002406:	46c0      	nop			; (mov r8, r8)
 8002408:	40007000 	.word	0x40007000
 800240c:	fffff9ff 	.word	0xfffff9ff
 8002410:	20000000 	.word	0x20000000
 8002414:	000f4240 	.word	0x000f4240

08002418 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <LL_RCC_GetAPB1Prescaler+0x14>)
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	23e0      	movs	r3, #224	; 0xe0
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	4013      	ands	r3, r2
}
 8002426:	0018      	movs	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000

08002430 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b088      	sub	sp, #32
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e2fe      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2201      	movs	r2, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d100      	bne.n	800244e <HAL_RCC_OscConfig+0x1e>
 800244c:	e07c      	b.n	8002548 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	4bc3      	ldr	r3, [pc, #780]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	2238      	movs	r2, #56	; 0x38
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002458:	4bc0      	ldr	r3, [pc, #768]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2203      	movs	r2, #3
 800245e:	4013      	ands	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b10      	cmp	r3, #16
 8002466:	d102      	bne.n	800246e <HAL_RCC_OscConfig+0x3e>
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d002      	beq.n	8002474 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4bb9      	ldr	r3, [pc, #740]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	029b      	lsls	r3, r3, #10
 800247c:	4013      	ands	r3, r2
 800247e:	d062      	beq.n	8002546 <HAL_RCC_OscConfig+0x116>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d15e      	bne.n	8002546 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e2d9      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	025b      	lsls	r3, r3, #9
 8002494:	429a      	cmp	r2, r3
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_OscConfig+0x78>
 8002498:	4bb0      	ldr	r3, [pc, #704]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4baf      	ldr	r3, [pc, #700]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	0249      	lsls	r1, r1, #9
 80024a2:	430a      	orrs	r2, r1
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e020      	b.n	80024ea <HAL_RCC_OscConfig+0xba>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	23a0      	movs	r3, #160	; 0xa0
 80024ae:	02db      	lsls	r3, r3, #11
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d10e      	bne.n	80024d2 <HAL_RCC_OscConfig+0xa2>
 80024b4:	4ba9      	ldr	r3, [pc, #676]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4ba8      	ldr	r3, [pc, #672]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80024ba:	2180      	movs	r1, #128	; 0x80
 80024bc:	02c9      	lsls	r1, r1, #11
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	4ba6      	ldr	r3, [pc, #664]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4ba5      	ldr	r3, [pc, #660]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	0249      	lsls	r1, r1, #9
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e00b      	b.n	80024ea <HAL_RCC_OscConfig+0xba>
 80024d2:	4ba2      	ldr	r3, [pc, #648]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4ba1      	ldr	r3, [pc, #644]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80024d8:	49a1      	ldr	r1, [pc, #644]	; (8002760 <HAL_RCC_OscConfig+0x330>)
 80024da:	400a      	ands	r2, r1
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	4b9f      	ldr	r3, [pc, #636]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4b9e      	ldr	r3, [pc, #632]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80024e4:	499f      	ldr	r1, [pc, #636]	; (8002764 <HAL_RCC_OscConfig+0x334>)
 80024e6:	400a      	ands	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d014      	beq.n	800251c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fcb5 	bl	8000e60 <HAL_GetTick>
 80024f6:	0003      	movs	r3, r0
 80024f8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fcb0 	bl	8000e60 <HAL_GetTick>
 8002500:	0002      	movs	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e298      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250e:	4b93      	ldr	r3, [pc, #588]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	2380      	movs	r3, #128	; 0x80
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	4013      	ands	r3, r2
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0xcc>
 800251a:	e015      	b.n	8002548 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251c:	f7fe fca0 	bl	8000e60 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002526:	f7fe fc9b 	bl	8000e60 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e283      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002538:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	4013      	ands	r3, r2
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0xf6>
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002546:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2202      	movs	r2, #2
 800254e:	4013      	ands	r3, r2
 8002550:	d100      	bne.n	8002554 <HAL_RCC_OscConfig+0x124>
 8002552:	e099      	b.n	8002688 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002554:	4b81      	ldr	r3, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2238      	movs	r2, #56	; 0x38
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255e:	4b7f      	ldr	r3, [pc, #508]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2203      	movs	r2, #3
 8002564:	4013      	ands	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	2b10      	cmp	r3, #16
 800256c:	d102      	bne.n	8002574 <HAL_RCC_OscConfig+0x144>
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d002      	beq.n	800257a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d135      	bne.n	80025e6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257a:	4b78      	ldr	r3, [pc, #480]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4013      	ands	r3, r2
 8002584:	d005      	beq.n	8002592 <HAL_RCC_OscConfig+0x162>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e256      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002592:	4b72      	ldr	r3, [pc, #456]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a74      	ldr	r2, [pc, #464]	; (8002768 <HAL_RCC_OscConfig+0x338>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	021a      	lsls	r2, r3, #8
 80025a2:	4b6e      	ldr	r3, [pc, #440]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80025a4:	430a      	orrs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025ae:	4b6b      	ldr	r3, [pc, #428]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6e      	ldr	r2, [pc, #440]	; (800276c <HAL_RCC_OscConfig+0x33c>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b67      	ldr	r3, [pc, #412]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80025be:	430a      	orrs	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80025c2:	4b66      	ldr	r3, [pc, #408]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0adb      	lsrs	r3, r3, #11
 80025c8:	2207      	movs	r2, #7
 80025ca:	4013      	ands	r3, r2
 80025cc:	4a68      	ldr	r2, [pc, #416]	; (8002770 <HAL_RCC_OscConfig+0x340>)
 80025ce:	40da      	lsrs	r2, r3
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCC_OscConfig+0x344>)
 80025d2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x348>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fe fbe5 	bl	8000da8 <HAL_InitTick>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d051      	beq.n	8002686 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e22c      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d030      	beq.n	8002650 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025ee:	4b5b      	ldr	r3, [pc, #364]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x33c>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	0019      	movs	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	4b57      	ldr	r3, [pc, #348]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002602:	4b56      	ldr	r3, [pc, #344]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b55      	ldr	r3, [pc, #340]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0049      	lsls	r1, r1, #1
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002610:	f7fe fc26 	bl	8000e60 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7fe fc21 	bl	8000e60 <HAL_GetTick>
 800261e:	0002      	movs	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e209      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800262c:	4b4b      	ldr	r3, [pc, #300]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4013      	ands	r3, r2
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b48      	ldr	r3, [pc, #288]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <HAL_RCC_OscConfig+0x338>)
 800263e:	4013      	ands	r3, r2
 8002640:	0019      	movs	r1, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	021a      	lsls	r2, r3, #8
 8002648:	4b44      	ldr	r3, [pc, #272]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800264a:	430a      	orrs	r2, r1
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	e01b      	b.n	8002688 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002650:	4b42      	ldr	r3, [pc, #264]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002656:	4949      	ldr	r1, [pc, #292]	; (800277c <HAL_RCC_OscConfig+0x34c>)
 8002658:	400a      	ands	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fc00 	bl	8000e60 <HAL_GetTick>
 8002660:	0003      	movs	r3, r0
 8002662:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7fe fbfb 	bl	8000e60 <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e1e3      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4013      	ands	r3, r2
 8002682:	d1f0      	bne.n	8002666 <HAL_RCC_OscConfig+0x236>
 8002684:	e000      	b.n	8002688 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002686:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2208      	movs	r2, #8
 800268e:	4013      	ands	r3, r2
 8002690:	d047      	beq.n	8002722 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002692:	4b32      	ldr	r3, [pc, #200]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2238      	movs	r2, #56	; 0x38
 8002698:	4013      	ands	r3, r2
 800269a:	2b18      	cmp	r3, #24
 800269c:	d10a      	bne.n	80026b4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800269e:	4b2f      	ldr	r3, [pc, #188]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d03c      	beq.n	8002722 <HAL_RCC_OscConfig+0x2f2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d138      	bne.n	8002722 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e1c5      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d019      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80026be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026c0:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	430a      	orrs	r2, r1
 80026c6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fbca 	bl	8000e60 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d2:	f7fe fbc5 	bl	8000e60 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1ad      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026e4:	4b1d      	ldr	r3, [pc, #116]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80026e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e8:	2202      	movs	r2, #2
 80026ea:	4013      	ands	r3, r2
 80026ec:	d0f1      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2a2>
 80026ee:	e018      	b.n	8002722 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80026f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	438a      	bics	r2, r1
 80026fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7fe fbb0 	bl	8000e60 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7fe fbab 	bl	8000e60 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e193      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d1f1      	bne.n	8002706 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2204      	movs	r2, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d100      	bne.n	800272e <HAL_RCC_OscConfig+0x2fe>
 800272c:	e0c6      	b.n	80028bc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272e:	231f      	movs	r3, #31
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2238      	movs	r2, #56	; 0x38
 800273c:	4013      	ands	r3, r2
 800273e:	2b20      	cmp	r3, #32
 8002740:	d11e      	bne.n	8002780 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_OscConfig+0x32c>)
 8002744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002746:	2202      	movs	r2, #2
 8002748:	4013      	ands	r3, r2
 800274a:	d100      	bne.n	800274e <HAL_RCC_OscConfig+0x31e>
 800274c:	e0b6      	b.n	80028bc <HAL_RCC_OscConfig+0x48c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d000      	beq.n	8002758 <HAL_RCC_OscConfig+0x328>
 8002756:	e0b1      	b.n	80028bc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e171      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
 800275c:	40021000 	.word	0x40021000
 8002760:	fffeffff 	.word	0xfffeffff
 8002764:	fffbffff 	.word	0xfffbffff
 8002768:	ffff80ff 	.word	0xffff80ff
 800276c:	ffffc7ff 	.word	0xffffc7ff
 8002770:	00f42400 	.word	0x00f42400
 8002774:	20000000 	.word	0x20000000
 8002778:	20000004 	.word	0x20000004
 800277c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002780:	4bb1      	ldr	r3, [pc, #708]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	055b      	lsls	r3, r3, #21
 8002788:	4013      	ands	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x360>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x362>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d011      	beq.n	80027ba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4bac      	ldr	r3, [pc, #688]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800279a:	4bab      	ldr	r3, [pc, #684]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	0549      	lsls	r1, r1, #21
 80027a0:	430a      	orrs	r2, r1
 80027a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80027a4:	4ba8      	ldr	r3, [pc, #672]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80027a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	055b      	lsls	r3, r3, #21
 80027ac:	4013      	ands	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80027b2:	231f      	movs	r3, #31
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ba:	4ba4      	ldr	r3, [pc, #656]	; (8002a4c <HAL_RCC_OscConfig+0x61c>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	d11a      	bne.n	80027fc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027c6:	4ba1      	ldr	r3, [pc, #644]	; (8002a4c <HAL_RCC_OscConfig+0x61c>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4ba0      	ldr	r3, [pc, #640]	; (8002a4c <HAL_RCC_OscConfig+0x61c>)
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	0049      	lsls	r1, r1, #1
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fb44 	bl	8000e60 <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027dc:	e008      	b.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7fe fb3f 	bl	8000e60 <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e127      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027f0:	4b96      	ldr	r3, [pc, #600]	; (8002a4c <HAL_RCC_OscConfig+0x61c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2380      	movs	r3, #128	; 0x80
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4013      	ands	r3, r2
 80027fa:	d0f0      	beq.n	80027de <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d106      	bne.n	8002812 <HAL_RCC_OscConfig+0x3e2>
 8002804:	4b90      	ldr	r3, [pc, #576]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002808:	4b8f      	ldr	r3, [pc, #572]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800280a:	2101      	movs	r1, #1
 800280c:	430a      	orrs	r2, r1
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002810:	e01c      	b.n	800284c <HAL_RCC_OscConfig+0x41c>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x404>
 800281a:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800281c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800281e:	4b8a      	ldr	r3, [pc, #552]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002820:	2104      	movs	r1, #4
 8002822:	430a      	orrs	r2, r1
 8002824:	65da      	str	r2, [r3, #92]	; 0x5c
 8002826:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800282a:	4b87      	ldr	r3, [pc, #540]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800282c:	2101      	movs	r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	65da      	str	r2, [r3, #92]	; 0x5c
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0x41c>
 8002834:	4b84      	ldr	r3, [pc, #528]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002836:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002838:	4b83      	ldr	r3, [pc, #524]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800283a:	2101      	movs	r1, #1
 800283c:	438a      	bics	r2, r1
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002840:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002844:	4b80      	ldr	r3, [pc, #512]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002846:	2104      	movs	r1, #4
 8002848:	438a      	bics	r2, r1
 800284a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d014      	beq.n	800287e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fb04 	bl	8000e60 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7fe faff 	bl	8000e60 <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	4a79      	ldr	r2, [pc, #484]	; (8002a50 <HAL_RCC_OscConfig+0x620>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e0e6      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002872:	4b75      	ldr	r3, [pc, #468]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	2202      	movs	r2, #2
 8002878:	4013      	ands	r3, r2
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x42e>
 800287c:	e013      	b.n	80028a6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe faef 	bl	8000e60 <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002886:	e009      	b.n	800289c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe faea 	bl	8000e60 <HAL_GetTick>
 800288c:	0002      	movs	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	4a6f      	ldr	r2, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x620>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0d1      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800289c:	4b6a      	ldr	r3, [pc, #424]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800289e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a0:	2202      	movs	r2, #2
 80028a2:	4013      	ands	r3, r2
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80028a6:	231f      	movs	r3, #31
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80028b0:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80028b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028b4:	4b64      	ldr	r3, [pc, #400]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80028b6:	4967      	ldr	r1, [pc, #412]	; (8002a54 <HAL_RCC_OscConfig+0x624>)
 80028b8:	400a      	ands	r2, r1
 80028ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d100      	bne.n	80028c6 <HAL_RCC_OscConfig+0x496>
 80028c4:	e0bb      	b.n	8002a3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c6:	4b60      	ldr	r3, [pc, #384]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	2238      	movs	r2, #56	; 0x38
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d100      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4a4>
 80028d2:	e07b      	b.n	80029cc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d156      	bne.n	800298a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b5a      	ldr	r3, [pc, #360]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b59      	ldr	r3, [pc, #356]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80028e2:	495d      	ldr	r1, [pc, #372]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe faba 	bl	8000e60 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fab5 	bl	8000e60 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e09d      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002904:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	2380      	movs	r3, #128	; 0x80
 800290a:	049b      	lsls	r3, r3, #18
 800290c:	4013      	ands	r3, r2
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002910:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a51      	ldr	r2, [pc, #324]	; (8002a5c <HAL_RCC_OscConfig+0x62c>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1a      	ldr	r2, [r3, #32]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	431a      	orrs	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293c:	431a      	orrs	r2, r3
 800293e:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002944:	4b40      	ldr	r3, [pc, #256]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	0449      	lsls	r1, r1, #17
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002952:	4b3d      	ldr	r3, [pc, #244]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	4b3c      	ldr	r3, [pc, #240]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002958:	2180      	movs	r1, #128	; 0x80
 800295a:	0549      	lsls	r1, r1, #21
 800295c:	430a      	orrs	r2, r1
 800295e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fa7e 	bl	8000e60 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800296a:	f7fe fa79 	bl	8000e60 <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e061      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297c:	4b32      	ldr	r3, [pc, #200]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	049b      	lsls	r3, r3, #18
 8002984:	4013      	ands	r3, r2
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x53a>
 8002988:	e059      	b.n	8002a3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b2e      	ldr	r3, [pc, #184]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 8002990:	4931      	ldr	r1, [pc, #196]	; (8002a58 <HAL_RCC_OscConfig+0x628>)
 8002992:	400a      	ands	r2, r1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7fe fa63 	bl	8000e60 <HAL_GetTick>
 800299a:	0003      	movs	r3, r0
 800299c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fa5e 	bl	8000e60 <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e046      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	049b      	lsls	r3, r3, #18
 80029ba:	4013      	ands	r3, r2
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	4b21      	ldr	r3, [pc, #132]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80029c4:	4926      	ldr	r1, [pc, #152]	; (8002a60 <HAL_RCC_OscConfig+0x630>)
 80029c6:	400a      	ands	r2, r1
 80029c8:	60da      	str	r2, [r3, #12]
 80029ca:	e038      	b.n	8002a3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e033      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	; (8002a48 <HAL_RCC_OscConfig+0x618>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2203      	movs	r2, #3
 80029e2:	401a      	ands	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d126      	bne.n	8002a3a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2270      	movs	r2, #112	; 0x70
 80029f0:	401a      	ands	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d11f      	bne.n	8002a3a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	23fe      	movs	r3, #254	; 0xfe
 80029fe:	01db      	lsls	r3, r3, #7
 8002a00:	401a      	ands	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d116      	bne.n	8002a3a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	23f8      	movs	r3, #248	; 0xf8
 8002a10:	039b      	lsls	r3, r3, #14
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d10e      	bne.n	8002a3a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	23e0      	movs	r3, #224	; 0xe0
 8002a20:	051b      	lsls	r3, r3, #20
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	0f5b      	lsrs	r3, r3, #29
 8002a30:	075a      	lsls	r2, r3, #29
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	0018      	movs	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b008      	add	sp, #32
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	00001388 	.word	0x00001388
 8002a54:	efffffff 	.word	0xefffffff
 8002a58:	feffffff 	.word	0xfeffffff
 8002a5c:	11c1808c 	.word	0x11c1808c
 8002a60:	eefefffc 	.word	0xeefefffc

08002a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0e9      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b76      	ldr	r3, [pc, #472]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2207      	movs	r2, #7
 8002a7e:	4013      	ands	r3, r2
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d91e      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b73      	ldr	r3, [pc, #460]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a98:	f7fe f9e2 	bl	8000e60 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aa0:	e009      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa2:	f7fe f9dd 	bl	8000e60 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	4a6a      	ldr	r2, [pc, #424]	; (8002c58 <HAL_RCC_ClockConfig+0x1f4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e0ca      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ab6:	4b67      	ldr	r3, [pc, #412]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2207      	movs	r2, #7
 8002abc:	4013      	ands	r3, r2
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d1ee      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	4013      	ands	r3, r2
 8002acc:	d015      	beq.n	8002afa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d006      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ad8:	4b60      	ldr	r3, [pc, #384]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002ade:	21e0      	movs	r1, #224	; 0xe0
 8002ae0:	01c9      	lsls	r1, r1, #7
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	4a5d      	ldr	r2, [pc, #372]	; (8002c60 <HAL_RCC_ClockConfig+0x1fc>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b59      	ldr	r3, [pc, #356]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2201      	movs	r2, #1
 8002b00:	4013      	ands	r3, r2
 8002b02:	d057      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d107      	bne.n	8002b1c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	029b      	lsls	r3, r3, #10
 8002b14:	4013      	ands	r3, r2
 8002b16:	d12b      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e097      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b24:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	049b      	lsls	r3, r3, #18
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	d11f      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e08b      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4013      	ands	r3, r2
 8002b46:	d113      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e07f      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d106      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b54:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b58:	2202      	movs	r2, #2
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e074      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b62:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2202      	movs	r2, #2
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e06d      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b70:	4b3a      	ldr	r3, [pc, #232]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2207      	movs	r2, #7
 8002b76:	4393      	bics	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4b37      	ldr	r3, [pc, #220]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002b80:	430a      	orrs	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b84:	f7fe f96c 	bl	8000e60 <HAL_GetTick>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b8c:	e009      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8e:	f7fe f967 	bl	8000e60 <HAL_GetTick>
 8002b92:	0002      	movs	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	4a2f      	ldr	r2, [pc, #188]	; (8002c58 <HAL_RCC_ClockConfig+0x1f4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e054      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba2:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2238      	movs	r2, #56	; 0x38
 8002ba8:	401a      	ands	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d1ec      	bne.n	8002b8e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bb4:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2207      	movs	r2, #7
 8002bba:	4013      	ands	r3, r2
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d21e      	bcs.n	8002c00 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	4393      	bics	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	4b21      	ldr	r3, [pc, #132]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe f944 	bl	8000e60 <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bdc:	e009      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bde:	f7fe f93f 	bl	8000e60 <HAL_GetTick>
 8002be2:	0002      	movs	r2, r0
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <HAL_RCC_ClockConfig+0x1f4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e02c      	b.n	8002c4c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1ee      	bne.n	8002bde <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2204      	movs	r2, #4
 8002c06:	4013      	ands	r3, r2
 8002c08:	d009      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c0a:	4b14      	ldr	r3, [pc, #80]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_RCC_ClockConfig+0x200>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002c1e:	f000 f829 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c22:	0001      	movs	r1, r0
 8002c24:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_RCC_ClockConfig+0x1f8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	401a      	ands	r2, r3
 8002c2e:	4b0e      	ldr	r3, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x204>)
 8002c30:	0092      	lsls	r2, r2, #2
 8002c32:	58d3      	ldr	r3, [r2, r3]
 8002c34:	221f      	movs	r2, #31
 8002c36:	4013      	ands	r3, r2
 8002c38:	000a      	movs	r2, r1
 8002c3a:	40da      	lsrs	r2, r3
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_RCC_ClockConfig+0x208>)
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c40:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <HAL_RCC_ClockConfig+0x20c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f7fe f8af 	bl	8000da8 <HAL_InitTick>
 8002c4a:	0003      	movs	r3, r0
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40022000 	.word	0x40022000
 8002c58:	00001388 	.word	0x00001388
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	fffff0ff 	.word	0xfffff0ff
 8002c64:	ffff8fff 	.word	0xffff8fff
 8002c68:	08004e48 	.word	0x08004e48
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c7a:	4b3c      	ldr	r3, [pc, #240]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2238      	movs	r2, #56	; 0x38
 8002c80:	4013      	ands	r3, r2
 8002c82:	d10f      	bne.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c84:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0adb      	lsrs	r3, r3, #11
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2201      	movs	r2, #1
 8002c90:	409a      	lsls	r2, r3
 8002c92:	0013      	movs	r3, r2
 8002c94:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c96:	6839      	ldr	r1, [r7, #0]
 8002c98:	4835      	ldr	r0, [pc, #212]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002c9a:	f7fd fa3d 	bl	8000118 <__udivsi3>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e05d      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca4:	4b31      	ldr	r3, [pc, #196]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2238      	movs	r2, #56	; 0x38
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d102      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cb0:	4b30      	ldr	r3, [pc, #192]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	e054      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb6:	4b2d      	ldr	r3, [pc, #180]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2238      	movs	r2, #56	; 0x38
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d138      	bne.n	8002d34 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002cc2:	4b2a      	ldr	r3, [pc, #168]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ccc:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d10d      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	4824      	ldr	r0, [pc, #144]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ce4:	f7fd fa18 	bl	8000118 <__udivsi3>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	0019      	movs	r1, r3
 8002cec:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	0a1b      	lsrs	r3, r3, #8
 8002cf2:	227f      	movs	r2, #127	; 0x7f
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	434b      	muls	r3, r1
 8002cf8:	617b      	str	r3, [r7, #20]
        break;
 8002cfa:	e00d      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	481c      	ldr	r0, [pc, #112]	; (8002d70 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d00:	f7fd fa0a 	bl	8000118 <__udivsi3>
 8002d04:	0003      	movs	r3, r0
 8002d06:	0019      	movs	r1, r3
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	227f      	movs	r2, #127	; 0x7f
 8002d10:	4013      	ands	r3, r2
 8002d12:	434b      	muls	r3, r1
 8002d14:	617b      	str	r3, [r7, #20]
        break;
 8002d16:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	0f5b      	lsrs	r3, r3, #29
 8002d1e:	2207      	movs	r2, #7
 8002d20:	4013      	ands	r3, r2
 8002d22:	3301      	adds	r3, #1
 8002d24:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	6978      	ldr	r0, [r7, #20]
 8002d2a:	f7fd f9f5 	bl	8000118 <__udivsi3>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	e015      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2238      	movs	r2, #56	; 0x38
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d103      	bne.n	8002d48 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	021b      	lsls	r3, r3, #8
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	e00b      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2238      	movs	r2, #56	; 0x38
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b18      	cmp	r3, #24
 8002d52:	d103      	bne.n	8002d5c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002d54:	23fa      	movs	r3, #250	; 0xfa
 8002d56:	01db      	lsls	r3, r3, #7
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	e001      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d60:	693b      	ldr	r3, [r7, #16]
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b006      	add	sp, #24
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	007a1200 	.word	0x007a1200

08002d78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	0018      	movs	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	20000000 	.word	0x20000000

08002d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002d90:	f7ff fff2 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d94:	0004      	movs	r4, r0
 8002d96:	f7ff fb3f 	bl	8002418 <LL_RCC_GetAPB1Prescaler>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	0b1a      	lsrs	r2, r3, #12
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	58d3      	ldr	r3, [r2, r3]
 8002da4:	221f      	movs	r2, #31
 8002da6:	4013      	ands	r3, r2
 8002da8:	40dc      	lsrs	r4, r3
 8002daa:	0023      	movs	r3, r4
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bdb0      	pop	{r4, r5, r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	08004e88 	.word	0x08004e88

08002db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002dc0:	2313      	movs	r3, #19
 8002dc2:	18fb      	adds	r3, r7, r3
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002dc8:	2312      	movs	r3, #18
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	029b      	lsls	r3, r3, #10
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d100      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ddc:	e0a3      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dde:	2011      	movs	r0, #17
 8002de0:	183b      	adds	r3, r7, r0
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de6:	4bc3      	ldr	r3, [pc, #780]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	055b      	lsls	r3, r3, #21
 8002dee:	4013      	ands	r3, r2
 8002df0:	d110      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	4bc0      	ldr	r3, [pc, #768]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002df6:	4bbf      	ldr	r3, [pc, #764]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0549      	lsls	r1, r1, #21
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e00:	4bbc      	ldr	r3, [pc, #752]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	055b      	lsls	r3, r3, #21
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0e:	183b      	adds	r3, r7, r0
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e14:	4bb8      	ldr	r3, [pc, #736]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4bb7      	ldr	r3, [pc, #732]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e1a:	2180      	movs	r1, #128	; 0x80
 8002e1c:	0049      	lsls	r1, r1, #1
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e22:	f7fe f81d 	bl	8000e60 <HAL_GetTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e2a:	e00b      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7fe f818 	bl	8000e60 <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d904      	bls.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002e3a:	2313      	movs	r3, #19
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2203      	movs	r2, #3
 8002e40:	701a      	strb	r2, [r3, #0]
        break;
 8002e42:	e005      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e44:	4bac      	ldr	r3, [pc, #688]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d0ed      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002e50:	2313      	movs	r3, #19
 8002e52:	18fb      	adds	r3, r7, r3
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d154      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e5a:	4ba6      	ldr	r3, [pc, #664]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e5e:	23c0      	movs	r3, #192	; 0xc0
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4013      	ands	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d019      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d014      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e76:	4b9f      	ldr	r3, [pc, #636]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	4aa0      	ldr	r2, [pc, #640]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e80:	4b9c      	ldr	r3, [pc, #624]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e84:	4b9b      	ldr	r3, [pc, #620]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	0249      	lsls	r1, r1, #9
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e8e:	4b99      	ldr	r3, [pc, #612]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e92:	4b98      	ldr	r3, [pc, #608]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e94:	499a      	ldr	r1, [pc, #616]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002e96:	400a      	ands	r2, r1
 8002e98:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e9a:	4b96      	ldr	r3, [pc, #600]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d016      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fd ffda 	bl	8000e60 <HAL_GetTick>
 8002eac:	0003      	movs	r3, r0
 8002eae:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb0:	e00c      	b.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb2:	f7fd ffd5 	bl	8000e60 <HAL_GetTick>
 8002eb6:	0002      	movs	r2, r0
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	4a91      	ldr	r2, [pc, #580]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d904      	bls.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ec2:	2313      	movs	r3, #19
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2203      	movs	r2, #3
 8002ec8:	701a      	strb	r2, [r3, #0]
            break;
 8002eca:	e004      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ecc:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d0ed      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ed6:	2313      	movs	r3, #19
 8002ed8:	18fb      	adds	r3, r7, r3
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ee0:	4b84      	ldr	r3, [pc, #528]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	4a85      	ldr	r2, [pc, #532]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	0019      	movs	r1, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eee:	4b81      	ldr	r3, [pc, #516]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ef4:	e00c      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ef6:	2312      	movs	r3, #18
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	2213      	movs	r2, #19
 8002efc:	18ba      	adds	r2, r7, r2
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	e005      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	2312      	movs	r3, #18
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2213      	movs	r2, #19
 8002f0a:	18ba      	adds	r2, r7, r2
 8002f0c:	7812      	ldrb	r2, [r2, #0]
 8002f0e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f10:	2311      	movs	r3, #17
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f1e:	4b75      	ldr	r3, [pc, #468]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f20:	4979      	ldr	r1, [pc, #484]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f30:	4b70      	ldr	r3, [pc, #448]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	2203      	movs	r2, #3
 8002f36:	4393      	bics	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f40:	430a      	orrs	r2, r1
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f4e:	4b69      	ldr	r3, [pc, #420]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f52:	220c      	movs	r2, #12
 8002f54:	4393      	bics	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	4b65      	ldr	r3, [pc, #404]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2210      	movs	r2, #16
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d009      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f6c:	4b61      	ldr	r3, [pc, #388]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	4a66      	ldr	r2, [pc, #408]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	0019      	movs	r1, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4b5e      	ldr	r3, [pc, #376]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	; 0x80
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d009      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f8c:	4b59      	ldr	r3, [pc, #356]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	4a5f      	ldr	r2, [pc, #380]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002f92:	4013      	ands	r3, r2
 8002f94:	0019      	movs	r1, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	4b56      	ldr	r3, [pc, #344]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d009      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fac:	4b51      	ldr	r3, [pc, #324]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	4a58      	ldr	r2, [pc, #352]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69da      	ldr	r2, [r3, #28]
 8002fba:	4b4e      	ldr	r3, [pc, #312]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fca:	4b4a      	ldr	r3, [pc, #296]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	4a52      	ldr	r2, [pc, #328]	; (8003118 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	01db      	lsls	r3, r3, #7
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d015      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fea:	4b42      	ldr	r3, [pc, #264]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	0899      	lsrs	r1, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a1a      	ldr	r2, [r3, #32]
 8002ff6:	4b3f      	ldr	r3, [pc, #252]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	429a      	cmp	r2, r3
 8003006:	d106      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003008:	4b3a      	ldr	r3, [pc, #232]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800300a:	68da      	ldr	r2, [r3, #12]
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800300e:	2180      	movs	r1, #128	; 0x80
 8003010:	0249      	lsls	r1, r1, #9
 8003012:	430a      	orrs	r2, r1
 8003014:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	031b      	lsls	r3, r3, #12
 800301e:	4013      	ands	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003022:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	2240      	movs	r2, #64	; 0x40
 8003028:	4393      	bics	r3, r2
 800302a:	0019      	movs	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003030:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003032:	430a      	orrs	r2, r1
 8003034:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	039b      	lsls	r3, r3, #14
 800303e:	4013      	ands	r3, r2
 8003040:	d016      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003042:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003046:	4a35      	ldr	r2, [pc, #212]	; (800311c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003048:	4013      	ands	r3, r2
 800304a:	0019      	movs	r1, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003052:	430a      	orrs	r2, r1
 8003054:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	03db      	lsls	r3, r3, #15
 800305e:	429a      	cmp	r2, r3
 8003060:	d106      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003062:	4b24      	ldr	r3, [pc, #144]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	4b23      	ldr	r3, [pc, #140]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	0449      	lsls	r1, r1, #17
 800306c:	430a      	orrs	r2, r1
 800306e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2380      	movs	r3, #128	; 0x80
 8003076:	03db      	lsls	r3, r3, #15
 8003078:	4013      	ands	r3, r2
 800307a:	d016      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	4a27      	ldr	r2, [pc, #156]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800308c:	430a      	orrs	r2, r1
 800308e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	045b      	lsls	r3, r3, #17
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030a2:	2180      	movs	r1, #128	; 0x80
 80030a4:	0449      	lsls	r1, r1, #17
 80030a6:	430a      	orrs	r2, r1
 80030a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	4013      	ands	r3, r2
 80030b4:	d016      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80030b6:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80030bc:	4013      	ands	r3, r2
 80030be:	0019      	movs	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030c6:	430a      	orrs	r2, r1
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	01db      	lsls	r3, r3, #7
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d106      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80030dc:	2180      	movs	r1, #128	; 0x80
 80030de:	0249      	lsls	r1, r1, #9
 80030e0:	430a      	orrs	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80030e4:	2312      	movs	r3, #18
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	781b      	ldrb	r3, [r3, #0]
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b006      	add	sp, #24
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40007000 	.word	0x40007000
 80030fc:	fffffcff 	.word	0xfffffcff
 8003100:	fffeffff 	.word	0xfffeffff
 8003104:	00001388 	.word	0x00001388
 8003108:	efffffff 	.word	0xefffffff
 800310c:	fffff3ff 	.word	0xfffff3ff
 8003110:	fff3ffff 	.word	0xfff3ffff
 8003114:	ffcfffff 	.word	0xffcfffff
 8003118:	ffffcfff 	.word	0xffffcfff
 800311c:	ffbfffff 	.word	0xffbfffff
 8003120:	feffffff 	.word	0xfeffffff
 8003124:	ffff3fff 	.word	0xffff3fff

08003128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e046      	b.n	80031c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2288      	movs	r2, #136	; 0x88
 800313e:	589b      	ldr	r3, [r3, r2]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2284      	movs	r2, #132	; 0x84
 8003148:	2100      	movs	r1, #0
 800314a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0018      	movs	r0, r3
 8003150:	f7fd fcc8 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2288      	movs	r2, #136	; 0x88
 8003158:	2124      	movs	r1, #36	; 0x24
 800315a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2101      	movs	r1, #1
 8003168:	438a      	bics	r2, r1
 800316a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 fb8e 	bl	8003898 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f000 f8cc 	bl	800331c <UART_SetConfig>
 8003184:	0003      	movs	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d101      	bne.n	800318e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e01c      	b.n	80031c8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	490d      	ldr	r1, [pc, #52]	; (80031d0 <HAL_UART_Init+0xa8>)
 800319a:	400a      	ands	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	212a      	movs	r1, #42	; 0x2a
 80031aa:	438a      	bics	r2, r1
 80031ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2101      	movs	r1, #1
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 fc1d 	bl	8003a00 <UART_CheckIdleState>
 80031c6:	0003      	movs	r3, r0
}
 80031c8:	0018      	movs	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	ffffb7ff 	.word	0xffffb7ff

080031d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	1dbb      	adds	r3, r7, #6
 80031e2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2288      	movs	r2, #136	; 0x88
 80031e8:	589b      	ldr	r3, [r3, r2]
 80031ea:	2b20      	cmp	r3, #32
 80031ec:	d000      	beq.n	80031f0 <HAL_UART_Transmit+0x1c>
 80031ee:	e090      	b.n	8003312 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_Transmit+0x2a>
 80031f6:	1dbb      	adds	r3, r7, #6
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e088      	b.n	8003314 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	015b      	lsls	r3, r3, #5
 800320a:	429a      	cmp	r2, r3
 800320c:	d109      	bne.n	8003222 <HAL_UART_Transmit+0x4e>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d105      	bne.n	8003222 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d001      	beq.n	8003222 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e078      	b.n	8003314 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2290      	movs	r2, #144	; 0x90
 8003226:	2100      	movs	r1, #0
 8003228:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2288      	movs	r2, #136	; 0x88
 800322e:	2121      	movs	r1, #33	; 0x21
 8003230:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003232:	f7fd fe15 	bl	8000e60 <HAL_GetTick>
 8003236:	0003      	movs	r3, r0
 8003238:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	1dba      	adds	r2, r7, #6
 800323e:	2154      	movs	r1, #84	; 0x54
 8003240:	8812      	ldrh	r2, [r2, #0]
 8003242:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1dba      	adds	r2, r7, #6
 8003248:	2156      	movs	r1, #86	; 0x56
 800324a:	8812      	ldrh	r2, [r2, #0]
 800324c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	015b      	lsls	r3, r3, #5
 8003256:	429a      	cmp	r2, r3
 8003258:	d108      	bne.n	800326c <HAL_UART_Transmit+0x98>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d104      	bne.n	800326c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	e003      	b.n	8003274 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003270:	2300      	movs	r3, #0
 8003272:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003274:	e030      	b.n	80032d8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	0013      	movs	r3, r2
 8003280:	2200      	movs	r2, #0
 8003282:	2180      	movs	r1, #128	; 0x80
 8003284:	f000 fc66 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 8003288:	1e03      	subs	r3, r0, #0
 800328a:	d005      	beq.n	8003298 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2288      	movs	r2, #136	; 0x88
 8003290:	2120      	movs	r1, #32
 8003292:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e03d      	b.n	8003314 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10b      	bne.n	80032b6 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	001a      	movs	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	05d2      	lsls	r2, r2, #23
 80032aa:	0dd2      	lsrs	r2, r2, #23
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	3302      	adds	r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]
 80032b4:	e007      	b.n	80032c6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	3301      	adds	r3, #1
 80032c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2256      	movs	r2, #86	; 0x56
 80032ca:	5a9b      	ldrh	r3, [r3, r2]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b299      	uxth	r1, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2256      	movs	r2, #86	; 0x56
 80032d6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2256      	movs	r2, #86	; 0x56
 80032dc:	5a9b      	ldrh	r3, [r3, r2]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1c8      	bne.n	8003276 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	0013      	movs	r3, r2
 80032ee:	2200      	movs	r2, #0
 80032f0:	2140      	movs	r1, #64	; 0x40
 80032f2:	f000 fc2f 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d005      	beq.n	8003306 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2288      	movs	r2, #136	; 0x88
 80032fe:	2120      	movs	r1, #32
 8003300:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e006      	b.n	8003314 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2288      	movs	r2, #136	; 0x88
 800330a:	2120      	movs	r1, #32
 800330c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	e000      	b.n	8003314 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003312:	2302      	movs	r3, #2
  }
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	b008      	add	sp, #32
 800331a:	bd80      	pop	{r7, pc}

0800331c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800331c:	b5b0      	push	{r4, r5, r7, lr}
 800331e:	b090      	sub	sp, #64	; 0x40
 8003320:	af00      	add	r7, sp, #0
 8003322:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003324:	231a      	movs	r3, #26
 8003326:	2220      	movs	r2, #32
 8003328:	189b      	adds	r3, r3, r2
 800332a:	19db      	adds	r3, r3, r7
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	431a      	orrs	r2, r3
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	431a      	orrs	r2, r3
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4313      	orrs	r3, r2
 8003346:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4aaf      	ldr	r2, [pc, #700]	; (800360c <UART_SetConfig+0x2f0>)
 8003350:	4013      	ands	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	430b      	orrs	r3, r1
 800335c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4aaa      	ldr	r2, [pc, #680]	; (8003610 <UART_SetConfig+0x2f4>)
 8003366:	4013      	ands	r3, r2
 8003368:	0018      	movs	r0, r3
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	68d9      	ldr	r1, [r3, #12]
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	0003      	movs	r3, r0
 8003374:	430b      	orrs	r3, r1
 8003376:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4aa4      	ldr	r2, [pc, #656]	; (8003614 <UART_SetConfig+0x2f8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800338e:	4313      	orrs	r3, r2
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a9f      	ldr	r2, [pc, #636]	; (8003618 <UART_SetConfig+0x2fc>)
 800339a:	4013      	ands	r3, r2
 800339c:	0019      	movs	r1, r3
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	220f      	movs	r2, #15
 80033b0:	4393      	bics	r3, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	0003      	movs	r3, r0
 80033be:	430b      	orrs	r3, r1
 80033c0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a95      	ldr	r2, [pc, #596]	; (800361c <UART_SetConfig+0x300>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d131      	bne.n	8003430 <UART_SetConfig+0x114>
 80033cc:	4b94      	ldr	r3, [pc, #592]	; (8003620 <UART_SetConfig+0x304>)
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	2203      	movs	r2, #3
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d01d      	beq.n	8003414 <UART_SetConfig+0xf8>
 80033d8:	d823      	bhi.n	8003422 <UART_SetConfig+0x106>
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d00c      	beq.n	80033f8 <UART_SetConfig+0xdc>
 80033de:	d820      	bhi.n	8003422 <UART_SetConfig+0x106>
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <UART_SetConfig+0xce>
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d00e      	beq.n	8003406 <UART_SetConfig+0xea>
 80033e8:	e01b      	b.n	8003422 <UART_SetConfig+0x106>
 80033ea:	231b      	movs	r3, #27
 80033ec:	2220      	movs	r2, #32
 80033ee:	189b      	adds	r3, r3, r2
 80033f0:	19db      	adds	r3, r3, r7
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e0b4      	b.n	8003562 <UART_SetConfig+0x246>
 80033f8:	231b      	movs	r3, #27
 80033fa:	2220      	movs	r2, #32
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	19db      	adds	r3, r3, r7
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
 8003404:	e0ad      	b.n	8003562 <UART_SetConfig+0x246>
 8003406:	231b      	movs	r3, #27
 8003408:	2220      	movs	r2, #32
 800340a:	189b      	adds	r3, r3, r2
 800340c:	19db      	adds	r3, r3, r7
 800340e:	2204      	movs	r2, #4
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	e0a6      	b.n	8003562 <UART_SetConfig+0x246>
 8003414:	231b      	movs	r3, #27
 8003416:	2220      	movs	r2, #32
 8003418:	189b      	adds	r3, r3, r2
 800341a:	19db      	adds	r3, r3, r7
 800341c:	2208      	movs	r2, #8
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	e09f      	b.n	8003562 <UART_SetConfig+0x246>
 8003422:	231b      	movs	r3, #27
 8003424:	2220      	movs	r2, #32
 8003426:	189b      	adds	r3, r3, r2
 8003428:	19db      	adds	r3, r3, r7
 800342a:	2210      	movs	r2, #16
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e098      	b.n	8003562 <UART_SetConfig+0x246>
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a7b      	ldr	r2, [pc, #492]	; (8003624 <UART_SetConfig+0x308>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d131      	bne.n	800349e <UART_SetConfig+0x182>
 800343a:	4b79      	ldr	r3, [pc, #484]	; (8003620 <UART_SetConfig+0x304>)
 800343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343e:	220c      	movs	r2, #12
 8003440:	4013      	ands	r3, r2
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d01d      	beq.n	8003482 <UART_SetConfig+0x166>
 8003446:	d823      	bhi.n	8003490 <UART_SetConfig+0x174>
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00c      	beq.n	8003466 <UART_SetConfig+0x14a>
 800344c:	d820      	bhi.n	8003490 <UART_SetConfig+0x174>
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <UART_SetConfig+0x13c>
 8003452:	2b04      	cmp	r3, #4
 8003454:	d00e      	beq.n	8003474 <UART_SetConfig+0x158>
 8003456:	e01b      	b.n	8003490 <UART_SetConfig+0x174>
 8003458:	231b      	movs	r3, #27
 800345a:	2220      	movs	r2, #32
 800345c:	189b      	adds	r3, r3, r2
 800345e:	19db      	adds	r3, r3, r7
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
 8003464:	e07d      	b.n	8003562 <UART_SetConfig+0x246>
 8003466:	231b      	movs	r3, #27
 8003468:	2220      	movs	r2, #32
 800346a:	189b      	adds	r3, r3, r2
 800346c:	19db      	adds	r3, r3, r7
 800346e:	2202      	movs	r2, #2
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	e076      	b.n	8003562 <UART_SetConfig+0x246>
 8003474:	231b      	movs	r3, #27
 8003476:	2220      	movs	r2, #32
 8003478:	189b      	adds	r3, r3, r2
 800347a:	19db      	adds	r3, r3, r7
 800347c:	2204      	movs	r2, #4
 800347e:	701a      	strb	r2, [r3, #0]
 8003480:	e06f      	b.n	8003562 <UART_SetConfig+0x246>
 8003482:	231b      	movs	r3, #27
 8003484:	2220      	movs	r2, #32
 8003486:	189b      	adds	r3, r3, r2
 8003488:	19db      	adds	r3, r3, r7
 800348a:	2208      	movs	r2, #8
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	e068      	b.n	8003562 <UART_SetConfig+0x246>
 8003490:	231b      	movs	r3, #27
 8003492:	2220      	movs	r2, #32
 8003494:	189b      	adds	r3, r3, r2
 8003496:	19db      	adds	r3, r3, r7
 8003498:	2210      	movs	r2, #16
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e061      	b.n	8003562 <UART_SetConfig+0x246>
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a61      	ldr	r2, [pc, #388]	; (8003628 <UART_SetConfig+0x30c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d106      	bne.n	80034b6 <UART_SetConfig+0x19a>
 80034a8:	231b      	movs	r3, #27
 80034aa:	2220      	movs	r2, #32
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	19db      	adds	r3, r3, r7
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e055      	b.n	8003562 <UART_SetConfig+0x246>
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a5c      	ldr	r2, [pc, #368]	; (800362c <UART_SetConfig+0x310>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d106      	bne.n	80034ce <UART_SetConfig+0x1b2>
 80034c0:	231b      	movs	r3, #27
 80034c2:	2220      	movs	r2, #32
 80034c4:	189b      	adds	r3, r3, r2
 80034c6:	19db      	adds	r3, r3, r7
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e049      	b.n	8003562 <UART_SetConfig+0x246>
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a50      	ldr	r2, [pc, #320]	; (8003614 <UART_SetConfig+0x2f8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d13e      	bne.n	8003556 <UART_SetConfig+0x23a>
 80034d8:	4b51      	ldr	r3, [pc, #324]	; (8003620 <UART_SetConfig+0x304>)
 80034da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034dc:	23c0      	movs	r3, #192	; 0xc0
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	4013      	ands	r3, r2
 80034e2:	22c0      	movs	r2, #192	; 0xc0
 80034e4:	0112      	lsls	r2, r2, #4
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d027      	beq.n	800353a <UART_SetConfig+0x21e>
 80034ea:	22c0      	movs	r2, #192	; 0xc0
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d82a      	bhi.n	8003548 <UART_SetConfig+0x22c>
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	0112      	lsls	r2, r2, #4
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d011      	beq.n	800351e <UART_SetConfig+0x202>
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	4293      	cmp	r3, r2
 8003500:	d822      	bhi.n	8003548 <UART_SetConfig+0x22c>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <UART_SetConfig+0x1f4>
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	00d2      	lsls	r2, r2, #3
 800350a:	4293      	cmp	r3, r2
 800350c:	d00e      	beq.n	800352c <UART_SetConfig+0x210>
 800350e:	e01b      	b.n	8003548 <UART_SetConfig+0x22c>
 8003510:	231b      	movs	r3, #27
 8003512:	2220      	movs	r2, #32
 8003514:	189b      	adds	r3, r3, r2
 8003516:	19db      	adds	r3, r3, r7
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e021      	b.n	8003562 <UART_SetConfig+0x246>
 800351e:	231b      	movs	r3, #27
 8003520:	2220      	movs	r2, #32
 8003522:	189b      	adds	r3, r3, r2
 8003524:	19db      	adds	r3, r3, r7
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e01a      	b.n	8003562 <UART_SetConfig+0x246>
 800352c:	231b      	movs	r3, #27
 800352e:	2220      	movs	r2, #32
 8003530:	189b      	adds	r3, r3, r2
 8003532:	19db      	adds	r3, r3, r7
 8003534:	2204      	movs	r2, #4
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e013      	b.n	8003562 <UART_SetConfig+0x246>
 800353a:	231b      	movs	r3, #27
 800353c:	2220      	movs	r2, #32
 800353e:	189b      	adds	r3, r3, r2
 8003540:	19db      	adds	r3, r3, r7
 8003542:	2208      	movs	r2, #8
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	e00c      	b.n	8003562 <UART_SetConfig+0x246>
 8003548:	231b      	movs	r3, #27
 800354a:	2220      	movs	r2, #32
 800354c:	189b      	adds	r3, r3, r2
 800354e:	19db      	adds	r3, r3, r7
 8003550:	2210      	movs	r2, #16
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e005      	b.n	8003562 <UART_SetConfig+0x246>
 8003556:	231b      	movs	r3, #27
 8003558:	2220      	movs	r2, #32
 800355a:	189b      	adds	r3, r3, r2
 800355c:	19db      	adds	r3, r3, r7
 800355e:	2210      	movs	r2, #16
 8003560:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <UART_SetConfig+0x2f8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d000      	beq.n	800356e <UART_SetConfig+0x252>
 800356c:	e0a9      	b.n	80036c2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800356e:	231b      	movs	r3, #27
 8003570:	2220      	movs	r2, #32
 8003572:	189b      	adds	r3, r3, r2
 8003574:	19db      	adds	r3, r3, r7
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b08      	cmp	r3, #8
 800357a:	d015      	beq.n	80035a8 <UART_SetConfig+0x28c>
 800357c:	dc18      	bgt.n	80035b0 <UART_SetConfig+0x294>
 800357e:	2b04      	cmp	r3, #4
 8003580:	d00d      	beq.n	800359e <UART_SetConfig+0x282>
 8003582:	dc15      	bgt.n	80035b0 <UART_SetConfig+0x294>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <UART_SetConfig+0x272>
 8003588:	2b02      	cmp	r3, #2
 800358a:	d005      	beq.n	8003598 <UART_SetConfig+0x27c>
 800358c:	e010      	b.n	80035b0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800358e:	f7ff fbfd 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 8003592:	0003      	movs	r3, r0
 8003594:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003596:	e014      	b.n	80035c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003598:	4b25      	ldr	r3, [pc, #148]	; (8003630 <UART_SetConfig+0x314>)
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800359c:	e011      	b.n	80035c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359e:	f7ff fb69 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 80035a2:	0003      	movs	r3, r0
 80035a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035a6:	e00c      	b.n	80035c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035ae:	e008      	b.n	80035c2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80035b4:	231a      	movs	r3, #26
 80035b6:	2220      	movs	r2, #32
 80035b8:	189b      	adds	r3, r3, r2
 80035ba:	19db      	adds	r3, r3, r7
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
        break;
 80035c0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d100      	bne.n	80035ca <UART_SetConfig+0x2ae>
 80035c8:	e14b      	b.n	8003862 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <UART_SetConfig+0x318>)
 80035d0:	0052      	lsls	r2, r2, #1
 80035d2:	5ad3      	ldrh	r3, [r2, r3]
 80035d4:	0019      	movs	r1, r3
 80035d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035d8:	f7fc fd9e 	bl	8000118 <__udivsi3>
 80035dc:	0003      	movs	r3, r0
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	0013      	movs	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d305      	bcc.n	80035fc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d91d      	bls.n	8003638 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80035fc:	231a      	movs	r3, #26
 80035fe:	2220      	movs	r2, #32
 8003600:	189b      	adds	r3, r3, r2
 8003602:	19db      	adds	r3, r3, r7
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
 8003608:	e12b      	b.n	8003862 <UART_SetConfig+0x546>
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	cfff69f3 	.word	0xcfff69f3
 8003610:	ffffcfff 	.word	0xffffcfff
 8003614:	40008000 	.word	0x40008000
 8003618:	11fff4ff 	.word	0x11fff4ff
 800361c:	40013800 	.word	0x40013800
 8003620:	40021000 	.word	0x40021000
 8003624:	40004400 	.word	0x40004400
 8003628:	40004800 	.word	0x40004800
 800362c:	40004c00 	.word	0x40004c00
 8003630:	00f42400 	.word	0x00f42400
 8003634:	08004ea8 	.word	0x08004ea8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003644:	4b92      	ldr	r3, [pc, #584]	; (8003890 <UART_SetConfig+0x574>)
 8003646:	0052      	lsls	r2, r2, #1
 8003648:	5ad3      	ldrh	r3, [r2, r3]
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	69b8      	ldr	r0, [r7, #24]
 8003656:	69f9      	ldr	r1, [r7, #28]
 8003658:	f7fc fed4 	bl	8000404 <__aeabi_uldivmod>
 800365c:	0002      	movs	r2, r0
 800365e:	000b      	movs	r3, r1
 8003660:	0e11      	lsrs	r1, r2, #24
 8003662:	021d      	lsls	r5, r3, #8
 8003664:	430d      	orrs	r5, r1
 8003666:	0214      	lsls	r4, r2, #8
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68b8      	ldr	r0, [r7, #8]
 8003676:	68f9      	ldr	r1, [r7, #12]
 8003678:	1900      	adds	r0, r0, r4
 800367a:	4169      	adcs	r1, r5
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f7fc febb 	bl	8000404 <__aeabi_uldivmod>
 800368e:	0002      	movs	r2, r0
 8003690:	000b      	movs	r3, r1
 8003692:	0013      	movs	r3, r2
 8003694:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003698:	23c0      	movs	r3, #192	; 0xc0
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d309      	bcc.n	80036b4 <UART_SetConfig+0x398>
 80036a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	035b      	lsls	r3, r3, #13
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d204      	bcs.n	80036b4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b0:	60da      	str	r2, [r3, #12]
 80036b2:	e0d6      	b.n	8003862 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80036b4:	231a      	movs	r3, #26
 80036b6:	2220      	movs	r2, #32
 80036b8:	189b      	adds	r3, r3, r2
 80036ba:	19db      	adds	r3, r3, r7
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
 80036c0:	e0cf      	b.n	8003862 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	2380      	movs	r3, #128	; 0x80
 80036c8:	021b      	lsls	r3, r3, #8
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d000      	beq.n	80036d0 <UART_SetConfig+0x3b4>
 80036ce:	e070      	b.n	80037b2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80036d0:	231b      	movs	r3, #27
 80036d2:	2220      	movs	r2, #32
 80036d4:	189b      	adds	r3, r3, r2
 80036d6:	19db      	adds	r3, r3, r7
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d015      	beq.n	800370a <UART_SetConfig+0x3ee>
 80036de:	dc18      	bgt.n	8003712 <UART_SetConfig+0x3f6>
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00d      	beq.n	8003700 <UART_SetConfig+0x3e4>
 80036e4:	dc15      	bgt.n	8003712 <UART_SetConfig+0x3f6>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <UART_SetConfig+0x3d4>
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d005      	beq.n	80036fa <UART_SetConfig+0x3de>
 80036ee:	e010      	b.n	8003712 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f0:	f7ff fb4c 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 80036f4:	0003      	movs	r3, r0
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036f8:	e014      	b.n	8003724 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036fa:	4b66      	ldr	r3, [pc, #408]	; (8003894 <UART_SetConfig+0x578>)
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036fe:	e011      	b.n	8003724 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003700:	f7ff fab8 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8003704:	0003      	movs	r3, r0
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003708:	e00c      	b.n	8003724 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003710:	e008      	b.n	8003724 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003716:	231a      	movs	r3, #26
 8003718:	2220      	movs	r2, #32
 800371a:	189b      	adds	r3, r3, r2
 800371c:	19db      	adds	r3, r3, r7
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
        break;
 8003722:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003726:	2b00      	cmp	r3, #0
 8003728:	d100      	bne.n	800372c <UART_SetConfig+0x410>
 800372a:	e09a      	b.n	8003862 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003730:	4b57      	ldr	r3, [pc, #348]	; (8003890 <UART_SetConfig+0x574>)
 8003732:	0052      	lsls	r2, r2, #1
 8003734:	5ad3      	ldrh	r3, [r2, r3]
 8003736:	0019      	movs	r1, r3
 8003738:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800373a:	f7fc fced 	bl	8000118 <__udivsi3>
 800373e:	0003      	movs	r3, r0
 8003740:	005a      	lsls	r2, r3, #1
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	18d2      	adds	r2, r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	0019      	movs	r1, r3
 8003750:	0010      	movs	r0, r2
 8003752:	f7fc fce1 	bl	8000118 <__udivsi3>
 8003756:	0003      	movs	r3, r0
 8003758:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800375a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375c:	2b0f      	cmp	r3, #15
 800375e:	d921      	bls.n	80037a4 <UART_SetConfig+0x488>
 8003760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	025b      	lsls	r3, r3, #9
 8003766:	429a      	cmp	r2, r3
 8003768:	d21c      	bcs.n	80037a4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	b29a      	uxth	r2, r3
 800376e:	200e      	movs	r0, #14
 8003770:	2420      	movs	r4, #32
 8003772:	1903      	adds	r3, r0, r4
 8003774:	19db      	adds	r3, r3, r7
 8003776:	210f      	movs	r1, #15
 8003778:	438a      	bics	r2, r1
 800377a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	085b      	lsrs	r3, r3, #1
 8003780:	b29b      	uxth	r3, r3
 8003782:	2207      	movs	r2, #7
 8003784:	4013      	ands	r3, r2
 8003786:	b299      	uxth	r1, r3
 8003788:	1903      	adds	r3, r0, r4
 800378a:	19db      	adds	r3, r3, r7
 800378c:	1902      	adds	r2, r0, r4
 800378e:	19d2      	adds	r2, r2, r7
 8003790:	8812      	ldrh	r2, [r2, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	1902      	adds	r2, r0, r4
 800379c:	19d2      	adds	r2, r2, r7
 800379e:	8812      	ldrh	r2, [r2, #0]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	e05e      	b.n	8003862 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80037a4:	231a      	movs	r3, #26
 80037a6:	2220      	movs	r2, #32
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	19db      	adds	r3, r3, r7
 80037ac:	2201      	movs	r2, #1
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e057      	b.n	8003862 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037b2:	231b      	movs	r3, #27
 80037b4:	2220      	movs	r2, #32
 80037b6:	189b      	adds	r3, r3, r2
 80037b8:	19db      	adds	r3, r3, r7
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d015      	beq.n	80037ec <UART_SetConfig+0x4d0>
 80037c0:	dc18      	bgt.n	80037f4 <UART_SetConfig+0x4d8>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d00d      	beq.n	80037e2 <UART_SetConfig+0x4c6>
 80037c6:	dc15      	bgt.n	80037f4 <UART_SetConfig+0x4d8>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <UART_SetConfig+0x4b6>
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d005      	beq.n	80037dc <UART_SetConfig+0x4c0>
 80037d0:	e010      	b.n	80037f4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037d2:	f7ff fadb 	bl	8002d8c <HAL_RCC_GetPCLK1Freq>
 80037d6:	0003      	movs	r3, r0
 80037d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037da:	e014      	b.n	8003806 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <UART_SetConfig+0x578>)
 80037de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037e0:	e011      	b.n	8003806 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037e2:	f7ff fa47 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 80037e6:	0003      	movs	r3, r0
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037ea:	e00c      	b.n	8003806 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037f2:	e008      	b.n	8003806 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80037f8:	231a      	movs	r3, #26
 80037fa:	2220      	movs	r2, #32
 80037fc:	189b      	adds	r3, r3, r2
 80037fe:	19db      	adds	r3, r3, r7
 8003800:	2201      	movs	r2, #1
 8003802:	701a      	strb	r2, [r3, #0]
        break;
 8003804:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02a      	beq.n	8003862 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <UART_SetConfig+0x574>)
 8003812:	0052      	lsls	r2, r2, #1
 8003814:	5ad3      	ldrh	r3, [r2, r3]
 8003816:	0019      	movs	r1, r3
 8003818:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800381a:	f7fc fc7d 	bl	8000118 <__udivsi3>
 800381e:	0003      	movs	r3, r0
 8003820:	001a      	movs	r2, r3
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	18d2      	adds	r2, r2, r3
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	0019      	movs	r1, r3
 8003830:	0010      	movs	r0, r2
 8003832:	f7fc fc71 	bl	8000118 <__udivsi3>
 8003836:	0003      	movs	r3, r0
 8003838:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800383a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d90a      	bls.n	8003856 <UART_SetConfig+0x53a>
 8003840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	025b      	lsls	r3, r3, #9
 8003846:	429a      	cmp	r2, r3
 8003848:	d205      	bcs.n	8003856 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384c:	b29a      	uxth	r2, r3
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60da      	str	r2, [r3, #12]
 8003854:	e005      	b.n	8003862 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003856:	231a      	movs	r3, #26
 8003858:	2220      	movs	r2, #32
 800385a:	189b      	adds	r3, r3, r2
 800385c:	19db      	adds	r3, r3, r7
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	226a      	movs	r2, #106	; 0x6a
 8003866:	2101      	movs	r1, #1
 8003868:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	2268      	movs	r2, #104	; 0x68
 800386e:	2101      	movs	r1, #1
 8003870:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	2200      	movs	r2, #0
 8003876:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	2200      	movs	r2, #0
 800387c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800387e:	231a      	movs	r3, #26
 8003880:	2220      	movs	r2, #32
 8003882:	189b      	adds	r3, r3, r2
 8003884:	19db      	adds	r3, r3, r7
 8003886:	781b      	ldrb	r3, [r3, #0]
}
 8003888:	0018      	movs	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	b010      	add	sp, #64	; 0x40
 800388e:	bdb0      	pop	{r4, r5, r7, pc}
 8003890:	08004ea8 	.word	0x08004ea8
 8003894:	00f42400 	.word	0x00f42400

08003898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2208      	movs	r2, #8
 80038a6:	4013      	ands	r3, r2
 80038a8:	d00b      	beq.n	80038c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <UART_AdvFeatureConfig+0x144>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	2201      	movs	r2, #1
 80038c8:	4013      	ands	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4a43      	ldr	r2, [pc, #268]	; (80039e0 <UART_AdvFeatureConfig+0x148>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	0019      	movs	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	2202      	movs	r2, #2
 80038ea:	4013      	ands	r3, r2
 80038ec:	d00b      	beq.n	8003906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	4a3b      	ldr	r2, [pc, #236]	; (80039e4 <UART_AdvFeatureConfig+0x14c>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	2204      	movs	r2, #4
 800390c:	4013      	ands	r3, r2
 800390e:	d00b      	beq.n	8003928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4a34      	ldr	r2, [pc, #208]	; (80039e8 <UART_AdvFeatureConfig+0x150>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	2210      	movs	r2, #16
 800392e:	4013      	ands	r3, r2
 8003930:	d00b      	beq.n	800394a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a2c      	ldr	r2, [pc, #176]	; (80039ec <UART_AdvFeatureConfig+0x154>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	2220      	movs	r2, #32
 8003950:	4013      	ands	r3, r2
 8003952:	d00b      	beq.n	800396c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4a25      	ldr	r2, [pc, #148]	; (80039f0 <UART_AdvFeatureConfig+0x158>)
 800395c:	4013      	ands	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	2240      	movs	r2, #64	; 0x40
 8003972:	4013      	ands	r3, r2
 8003974:	d01d      	beq.n	80039b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a1d      	ldr	r2, [pc, #116]	; (80039f4 <UART_AdvFeatureConfig+0x15c>)
 800397e:	4013      	ands	r3, r2
 8003980:	0019      	movs	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	035b      	lsls	r3, r3, #13
 8003996:	429a      	cmp	r2, r3
 8003998:	d10b      	bne.n	80039b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <UART_AdvFeatureConfig+0x160>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	4013      	ands	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <UART_AdvFeatureConfig+0x164>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	0019      	movs	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	605a      	str	r2, [r3, #4]
  }
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	ffff7fff 	.word	0xffff7fff
 80039e0:	fffdffff 	.word	0xfffdffff
 80039e4:	fffeffff 	.word	0xfffeffff
 80039e8:	fffbffff 	.word	0xfffbffff
 80039ec:	ffffefff 	.word	0xffffefff
 80039f0:	ffffdfff 	.word	0xffffdfff
 80039f4:	ffefffff 	.word	0xffefffff
 80039f8:	ff9fffff 	.word	0xff9fffff
 80039fc:	fff7ffff 	.word	0xfff7ffff

08003a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b092      	sub	sp, #72	; 0x48
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2290      	movs	r2, #144	; 0x90
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a10:	f7fd fa26 	bl	8000e60 <HAL_GetTick>
 8003a14:	0003      	movs	r3, r0
 8003a16:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2208      	movs	r2, #8
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d12d      	bne.n	8003a82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	0391      	lsls	r1, r2, #14
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4a47      	ldr	r2, [pc, #284]	; (8003b4c <UART_CheckIdleState+0x14c>)
 8003a30:	9200      	str	r2, [sp, #0]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f000 f88e 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 8003a38:	1e03      	subs	r3, r0, #0
 8003a3a:	d022      	beq.n	8003a82 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a46:	2301      	movs	r3, #1
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	f383 8810 	msr	PRIMASK, r3
}
 8003a50:	46c0      	nop			; (mov r8, r8)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	438a      	bics	r2, r1
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a68:	f383 8810 	msr	PRIMASK, r3
}
 8003a6c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2288      	movs	r2, #136	; 0x88
 8003a72:	2120      	movs	r1, #32
 8003a74:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2284      	movs	r2, #132	; 0x84
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e060      	b.n	8003b44 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d146      	bne.n	8003b1e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	2280      	movs	r2, #128	; 0x80
 8003a94:	03d1      	lsls	r1, r2, #15
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <UART_CheckIdleState+0x14c>)
 8003a9a:	9200      	str	r2, [sp, #0]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f000 f859 	bl	8003b54 <UART_WaitOnFlagUntilTimeout>
 8003aa2:	1e03      	subs	r3, r0, #0
 8003aa4:	d03b      	beq.n	8003b1e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f383 8810 	msr	PRIMASK, r3
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4922      	ldr	r1, [pc, #136]	; (8003b50 <UART_CheckIdleState+0x150>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8003adc:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ade:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2101      	movs	r1, #1
 8003afa:	438a      	bics	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	228c      	movs	r2, #140	; 0x8c
 8003b0e:	2120      	movs	r1, #32
 8003b10:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2284      	movs	r2, #132	; 0x84
 8003b16:	2100      	movs	r1, #0
 8003b18:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e012      	b.n	8003b44 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2288      	movs	r2, #136	; 0x88
 8003b22:	2120      	movs	r1, #32
 8003b24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	228c      	movs	r2, #140	; 0x8c
 8003b2a:	2120      	movs	r1, #32
 8003b2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2284      	movs	r2, #132	; 0x84
 8003b3e:	2100      	movs	r1, #0
 8003b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	0018      	movs	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b010      	add	sp, #64	; 0x40
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	01ffffff 	.word	0x01ffffff
 8003b50:	fffffedf 	.word	0xfffffedf

08003b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b64:	e051      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	d04e      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fd f978 	bl	8000e60 <HAL_GetTick>
 8003b70:	0002      	movs	r2, r0
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e051      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d03b      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d038      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d035      	beq.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d111      	bne.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2208      	movs	r2, #8
 8003bb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 f83c 	bl	8003c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2290      	movs	r2, #144	; 0x90
 8003bc0:	2108      	movs	r1, #8
 8003bc2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2284      	movs	r2, #132	; 0x84
 8003bc8:	2100      	movs	r1, #0
 8003bca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02c      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69da      	ldr	r2, [r3, #28]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	401a      	ands	r2, r3
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d112      	bne.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2280      	movs	r2, #128	; 0x80
 8003bea:	0112      	lsls	r2, r2, #4
 8003bec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f000 f81f 	bl	8003c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2290      	movs	r2, #144	; 0x90
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2284      	movs	r2, #132	; 0x84
 8003c02:	2100      	movs	r1, #0
 8003c04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e00f      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	4013      	ands	r3, r2
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	425a      	negs	r2, r3
 8003c1a:	4153      	adcs	r3, r2
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	001a      	movs	r2, r3
 8003c20:	1dfb      	adds	r3, r7, #7
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d09e      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b004      	add	sp, #16
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08e      	sub	sp, #56	; 0x38
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c40:	617b      	str	r3, [r7, #20]
  return(result);
 8003c42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	f383 8810 	msr	PRIMASK, r3
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4926      	ldr	r1, [pc, #152]	; (8003cf8 <UART_EndRxTransfer+0xc4>)
 8003c5e:	400a      	ands	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c72:	623b      	str	r3, [r7, #32]
  return(result);
 8003c74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c76:	633b      	str	r3, [r7, #48]	; 0x30
 8003c78:	2301      	movs	r3, #1
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	f383 8810 	msr	PRIMASK, r3
}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	491b      	ldr	r1, [pc, #108]	; (8003cfc <UART_EndRxTransfer+0xc8>)
 8003c90:	400a      	ands	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d118      	bne.n	8003cda <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2110      	movs	r1, #16
 8003cca:	438a      	bics	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f383 8810 	msr	PRIMASK, r3
}
 8003cd8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	228c      	movs	r2, #140	; 0x8c
 8003cde:	2120      	movs	r1, #32
 8003ce0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b00e      	add	sp, #56	; 0x38
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	fffffedf 	.word	0xfffffedf
 8003cfc:	effffffe 	.word	0xeffffffe

08003d00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2284      	movs	r2, #132	; 0x84
 8003d0c:	5c9b      	ldrb	r3, [r3, r2]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_UARTEx_DisableFifoMode+0x16>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e027      	b.n	8003d66 <HAL_UARTEx_DisableFifoMode+0x66>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2284      	movs	r2, #132	; 0x84
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2288      	movs	r2, #136	; 0x88
 8003d22:	2124      	movs	r1, #36	; 0x24
 8003d24:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	438a      	bics	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a0b      	ldr	r2, [pc, #44]	; (8003d70 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2288      	movs	r2, #136	; 0x88
 8003d58:	2120      	movs	r1, #32
 8003d5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2284      	movs	r2, #132	; 0x84
 8003d60:	2100      	movs	r1, #0
 8003d62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	dfffffff 	.word	0xdfffffff

08003d74 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2284      	movs	r2, #132	; 0x84
 8003d82:	5c9b      	ldrb	r3, [r3, r2]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d101      	bne.n	8003d8c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d88:	2302      	movs	r3, #2
 8003d8a:	e02e      	b.n	8003dea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2284      	movs	r2, #132	; 0x84
 8003d90:	2101      	movs	r1, #1
 8003d92:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2288      	movs	r2, #136	; 0x88
 8003d98:	2124      	movs	r1, #36	; 0x24
 8003d9a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	08d9      	lsrs	r1, r3, #3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 f854 	bl	8003e78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2288      	movs	r2, #136	; 0x88
 8003ddc:	2120      	movs	r1, #32
 8003dde:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2284      	movs	r2, #132	; 0x84
 8003de4:	2100      	movs	r1, #0
 8003de6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b004      	add	sp, #16
 8003df0:	bd80      	pop	{r7, pc}
	...

08003df4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2284      	movs	r2, #132	; 0x84
 8003e02:	5c9b      	ldrb	r3, [r3, r2]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e02f      	b.n	8003e6c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2284      	movs	r2, #132	; 0x84
 8003e10:	2101      	movs	r1, #1
 8003e12:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2288      	movs	r2, #136	; 0x88
 8003e18:	2124      	movs	r1, #36	; 0x24
 8003e1a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2101      	movs	r1, #1
 8003e30:	438a      	bics	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	4a0e      	ldr	r2, [pc, #56]	; (8003e74 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	0019      	movs	r1, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 f813 	bl	8003e78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2288      	movs	r2, #136	; 0x88
 8003e5e:	2120      	movs	r1, #32
 8003e60:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2284      	movs	r2, #132	; 0x84
 8003e66:	2100      	movs	r1, #0
 8003e68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b004      	add	sp, #16
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	f1ffffff 	.word	0xf1ffffff

08003e78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d108      	bne.n	8003e9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	226a      	movs	r2, #106	; 0x6a
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2268      	movs	r2, #104	; 0x68
 8003e94:	2101      	movs	r1, #1
 8003e96:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e98:	e043      	b.n	8003f22 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e9a:	260f      	movs	r6, #15
 8003e9c:	19bb      	adds	r3, r7, r6
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ea2:	200e      	movs	r0, #14
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	0e5b      	lsrs	r3, r3, #25
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	240d      	movs	r4, #13
 8003eb6:	193b      	adds	r3, r7, r4
 8003eb8:	2107      	movs	r1, #7
 8003eba:	400a      	ands	r2, r1
 8003ebc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	0f5b      	lsrs	r3, r3, #29
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	250c      	movs	r5, #12
 8003eca:	197b      	adds	r3, r7, r5
 8003ecc:	2107      	movs	r1, #7
 8003ece:	400a      	ands	r2, r1
 8003ed0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ed2:	183b      	adds	r3, r7, r0
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	197a      	adds	r2, r7, r5
 8003ed8:	7812      	ldrb	r2, [r2, #0]
 8003eda:	4914      	ldr	r1, [pc, #80]	; (8003f2c <UARTEx_SetNbDataToProcess+0xb4>)
 8003edc:	5c8a      	ldrb	r2, [r1, r2]
 8003ede:	435a      	muls	r2, r3
 8003ee0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ee2:	197b      	adds	r3, r7, r5
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <UARTEx_SetNbDataToProcess+0xb8>)
 8003ee8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003eea:	0019      	movs	r1, r3
 8003eec:	f7fc f99e 	bl	800022c <__divsi3>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	b299      	uxth	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	226a      	movs	r2, #106	; 0x6a
 8003ef8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003efa:	19bb      	adds	r3, r7, r6
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	193a      	adds	r2, r7, r4
 8003f00:	7812      	ldrb	r2, [r2, #0]
 8003f02:	490a      	ldr	r1, [pc, #40]	; (8003f2c <UARTEx_SetNbDataToProcess+0xb4>)
 8003f04:	5c8a      	ldrb	r2, [r1, r2]
 8003f06:	435a      	muls	r2, r3
 8003f08:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f0a:	193b      	adds	r3, r7, r4
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	4a08      	ldr	r2, [pc, #32]	; (8003f30 <UARTEx_SetNbDataToProcess+0xb8>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f12:	0019      	movs	r1, r3
 8003f14:	f7fc f98a 	bl	800022c <__divsi3>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	b299      	uxth	r1, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2268      	movs	r2, #104	; 0x68
 8003f20:	5299      	strh	r1, [r3, r2]
}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	46bd      	mov	sp, r7
 8003f26:	b005      	add	sp, #20
 8003f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	08004ec0 	.word	0x08004ec0
 8003f30:	08004ec8 	.word	0x08004ec8

08003f34 <std>:
 8003f34:	2300      	movs	r3, #0
 8003f36:	b510      	push	{r4, lr}
 8003f38:	0004      	movs	r4, r0
 8003f3a:	6003      	str	r3, [r0, #0]
 8003f3c:	6043      	str	r3, [r0, #4]
 8003f3e:	6083      	str	r3, [r0, #8]
 8003f40:	8181      	strh	r1, [r0, #12]
 8003f42:	6643      	str	r3, [r0, #100]	; 0x64
 8003f44:	81c2      	strh	r2, [r0, #14]
 8003f46:	6103      	str	r3, [r0, #16]
 8003f48:	6143      	str	r3, [r0, #20]
 8003f4a:	6183      	str	r3, [r0, #24]
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	2208      	movs	r2, #8
 8003f50:	305c      	adds	r0, #92	; 0x5c
 8003f52:	f000 f90f 	bl	8004174 <memset>
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <std+0x50>)
 8003f58:	6224      	str	r4, [r4, #32]
 8003f5a:	6263      	str	r3, [r4, #36]	; 0x24
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <std+0x54>)
 8003f5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <std+0x58>)
 8003f62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <std+0x5c>)
 8003f66:	6323      	str	r3, [r4, #48]	; 0x30
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <std+0x60>)
 8003f6a:	429c      	cmp	r4, r3
 8003f6c:	d005      	beq.n	8003f7a <std+0x46>
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <std+0x64>)
 8003f70:	429c      	cmp	r4, r3
 8003f72:	d002      	beq.n	8003f7a <std+0x46>
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <std+0x68>)
 8003f76:	429c      	cmp	r4, r3
 8003f78:	d103      	bne.n	8003f82 <std+0x4e>
 8003f7a:	0020      	movs	r0, r4
 8003f7c:	3058      	adds	r0, #88	; 0x58
 8003f7e:	f000 f979 	bl	8004274 <__retarget_lock_init_recursive>
 8003f82:	bd10      	pop	{r4, pc}
 8003f84:	080040dd 	.word	0x080040dd
 8003f88:	08004105 	.word	0x08004105
 8003f8c:	0800413d 	.word	0x0800413d
 8003f90:	08004169 	.word	0x08004169
 8003f94:	200001f8 	.word	0x200001f8
 8003f98:	20000260 	.word	0x20000260
 8003f9c:	200002c8 	.word	0x200002c8

08003fa0 <stdio_exit_handler>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <stdio_exit_handler+0x10>)
 8003fa4:	4903      	ldr	r1, [pc, #12]	; (8003fb4 <stdio_exit_handler+0x14>)
 8003fa6:	4804      	ldr	r0, [pc, #16]	; (8003fb8 <stdio_exit_handler+0x18>)
 8003fa8:	f000 f86c 	bl	8004084 <_fwalk_sglue>
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	2000000c 	.word	0x2000000c
 8003fb4:	08004b15 	.word	0x08004b15
 8003fb8:	20000018 	.word	0x20000018

08003fbc <cleanup_stdio>:
 8003fbc:	6841      	ldr	r1, [r0, #4]
 8003fbe:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <cleanup_stdio+0x30>)
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	0004      	movs	r4, r0
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	d001      	beq.n	8003fcc <cleanup_stdio+0x10>
 8003fc8:	f000 fda4 	bl	8004b14 <_fflush_r>
 8003fcc:	68a1      	ldr	r1, [r4, #8]
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <cleanup_stdio+0x34>)
 8003fd0:	4299      	cmp	r1, r3
 8003fd2:	d002      	beq.n	8003fda <cleanup_stdio+0x1e>
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	f000 fd9d 	bl	8004b14 <_fflush_r>
 8003fda:	68e1      	ldr	r1, [r4, #12]
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <cleanup_stdio+0x38>)
 8003fde:	4299      	cmp	r1, r3
 8003fe0:	d002      	beq.n	8003fe8 <cleanup_stdio+0x2c>
 8003fe2:	0020      	movs	r0, r4
 8003fe4:	f000 fd96 	bl	8004b14 <_fflush_r>
 8003fe8:	bd10      	pop	{r4, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	200001f8 	.word	0x200001f8
 8003ff0:	20000260 	.word	0x20000260
 8003ff4:	200002c8 	.word	0x200002c8

08003ff8 <global_stdio_init.part.0>:
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <global_stdio_init.part.0+0x28>)
 8003ffc:	4a09      	ldr	r2, [pc, #36]	; (8004024 <global_stdio_init.part.0+0x2c>)
 8003ffe:	2104      	movs	r1, #4
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	4809      	ldr	r0, [pc, #36]	; (8004028 <global_stdio_init.part.0+0x30>)
 8004004:	2200      	movs	r2, #0
 8004006:	f7ff ff95 	bl	8003f34 <std>
 800400a:	2201      	movs	r2, #1
 800400c:	2109      	movs	r1, #9
 800400e:	4807      	ldr	r0, [pc, #28]	; (800402c <global_stdio_init.part.0+0x34>)
 8004010:	f7ff ff90 	bl	8003f34 <std>
 8004014:	2202      	movs	r2, #2
 8004016:	2112      	movs	r1, #18
 8004018:	4805      	ldr	r0, [pc, #20]	; (8004030 <global_stdio_init.part.0+0x38>)
 800401a:	f7ff ff8b 	bl	8003f34 <std>
 800401e:	bd10      	pop	{r4, pc}
 8004020:	20000330 	.word	0x20000330
 8004024:	08003fa1 	.word	0x08003fa1
 8004028:	200001f8 	.word	0x200001f8
 800402c:	20000260 	.word	0x20000260
 8004030:	200002c8 	.word	0x200002c8

08004034 <__sfp_lock_acquire>:
 8004034:	b510      	push	{r4, lr}
 8004036:	4802      	ldr	r0, [pc, #8]	; (8004040 <__sfp_lock_acquire+0xc>)
 8004038:	f000 f91d 	bl	8004276 <__retarget_lock_acquire_recursive>
 800403c:	bd10      	pop	{r4, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	20000339 	.word	0x20000339

08004044 <__sfp_lock_release>:
 8004044:	b510      	push	{r4, lr}
 8004046:	4802      	ldr	r0, [pc, #8]	; (8004050 <__sfp_lock_release+0xc>)
 8004048:	f000 f916 	bl	8004278 <__retarget_lock_release_recursive>
 800404c:	bd10      	pop	{r4, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	20000339 	.word	0x20000339

08004054 <__sinit>:
 8004054:	b510      	push	{r4, lr}
 8004056:	0004      	movs	r4, r0
 8004058:	f7ff ffec 	bl	8004034 <__sfp_lock_acquire>
 800405c:	6a23      	ldr	r3, [r4, #32]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <__sinit+0x14>
 8004062:	f7ff ffef 	bl	8004044 <__sfp_lock_release>
 8004066:	bd10      	pop	{r4, pc}
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <__sinit+0x28>)
 800406a:	6223      	str	r3, [r4, #32]
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <__sinit+0x2c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f6      	bne.n	8004062 <__sinit+0xe>
 8004074:	f7ff ffc0 	bl	8003ff8 <global_stdio_init.part.0>
 8004078:	e7f3      	b.n	8004062 <__sinit+0xe>
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	08003fbd 	.word	0x08003fbd
 8004080:	20000330 	.word	0x20000330

08004084 <_fwalk_sglue>:
 8004084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004086:	0014      	movs	r4, r2
 8004088:	2600      	movs	r6, #0
 800408a:	9000      	str	r0, [sp, #0]
 800408c:	9101      	str	r1, [sp, #4]
 800408e:	68a5      	ldr	r5, [r4, #8]
 8004090:	6867      	ldr	r7, [r4, #4]
 8004092:	3f01      	subs	r7, #1
 8004094:	d504      	bpl.n	80040a0 <_fwalk_sglue+0x1c>
 8004096:	6824      	ldr	r4, [r4, #0]
 8004098:	2c00      	cmp	r4, #0
 800409a:	d1f8      	bne.n	800408e <_fwalk_sglue+0xa>
 800409c:	0030      	movs	r0, r6
 800409e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040a0:	89ab      	ldrh	r3, [r5, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d908      	bls.n	80040b8 <_fwalk_sglue+0x34>
 80040a6:	220e      	movs	r2, #14
 80040a8:	5eab      	ldrsh	r3, [r5, r2]
 80040aa:	3301      	adds	r3, #1
 80040ac:	d004      	beq.n	80040b8 <_fwalk_sglue+0x34>
 80040ae:	0029      	movs	r1, r5
 80040b0:	9800      	ldr	r0, [sp, #0]
 80040b2:	9b01      	ldr	r3, [sp, #4]
 80040b4:	4798      	blx	r3
 80040b6:	4306      	orrs	r6, r0
 80040b8:	3568      	adds	r5, #104	; 0x68
 80040ba:	e7ea      	b.n	8004092 <_fwalk_sglue+0xe>

080040bc <iprintf>:
 80040bc:	b40f      	push	{r0, r1, r2, r3}
 80040be:	b507      	push	{r0, r1, r2, lr}
 80040c0:	4905      	ldr	r1, [pc, #20]	; (80040d8 <iprintf+0x1c>)
 80040c2:	ab04      	add	r3, sp, #16
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	cb04      	ldmia	r3!, {r2}
 80040c8:	6881      	ldr	r1, [r0, #8]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	f000 f9fc 	bl	80044c8 <_vfiprintf_r>
 80040d0:	b003      	add	sp, #12
 80040d2:	bc08      	pop	{r3}
 80040d4:	b004      	add	sp, #16
 80040d6:	4718      	bx	r3
 80040d8:	20000064 	.word	0x20000064

080040dc <__sread>:
 80040dc:	b570      	push	{r4, r5, r6, lr}
 80040de:	000c      	movs	r4, r1
 80040e0:	250e      	movs	r5, #14
 80040e2:	5f49      	ldrsh	r1, [r1, r5]
 80040e4:	f000 f874 	bl	80041d0 <_read_r>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	db03      	blt.n	80040f4 <__sread+0x18>
 80040ec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80040ee:	181b      	adds	r3, r3, r0
 80040f0:	6563      	str	r3, [r4, #84]	; 0x54
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	89a3      	ldrh	r3, [r4, #12]
 80040f6:	4a02      	ldr	r2, [pc, #8]	; (8004100 <__sread+0x24>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	81a3      	strh	r3, [r4, #12]
 80040fc:	e7f9      	b.n	80040f2 <__sread+0x16>
 80040fe:	46c0      	nop			; (mov r8, r8)
 8004100:	ffffefff 	.word	0xffffefff

08004104 <__swrite>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	001f      	movs	r7, r3
 8004108:	898b      	ldrh	r3, [r1, #12]
 800410a:	0005      	movs	r5, r0
 800410c:	000c      	movs	r4, r1
 800410e:	0016      	movs	r6, r2
 8004110:	05db      	lsls	r3, r3, #23
 8004112:	d505      	bpl.n	8004120 <__swrite+0x1c>
 8004114:	230e      	movs	r3, #14
 8004116:	5ec9      	ldrsh	r1, [r1, r3]
 8004118:	2200      	movs	r2, #0
 800411a:	2302      	movs	r3, #2
 800411c:	f000 f844 	bl	80041a8 <_lseek_r>
 8004120:	89a3      	ldrh	r3, [r4, #12]
 8004122:	4a05      	ldr	r2, [pc, #20]	; (8004138 <__swrite+0x34>)
 8004124:	0028      	movs	r0, r5
 8004126:	4013      	ands	r3, r2
 8004128:	81a3      	strh	r3, [r4, #12]
 800412a:	0032      	movs	r2, r6
 800412c:	230e      	movs	r3, #14
 800412e:	5ee1      	ldrsh	r1, [r4, r3]
 8004130:	003b      	movs	r3, r7
 8004132:	f000 f861 	bl	80041f8 <_write_r>
 8004136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004138:	ffffefff 	.word	0xffffefff

0800413c <__sseek>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	000c      	movs	r4, r1
 8004140:	250e      	movs	r5, #14
 8004142:	5f49      	ldrsh	r1, [r1, r5]
 8004144:	f000 f830 	bl	80041a8 <_lseek_r>
 8004148:	89a3      	ldrh	r3, [r4, #12]
 800414a:	1c42      	adds	r2, r0, #1
 800414c:	d103      	bne.n	8004156 <__sseek+0x1a>
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <__sseek+0x28>)
 8004150:	4013      	ands	r3, r2
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	bd70      	pop	{r4, r5, r6, pc}
 8004156:	2280      	movs	r2, #128	; 0x80
 8004158:	0152      	lsls	r2, r2, #5
 800415a:	4313      	orrs	r3, r2
 800415c:	81a3      	strh	r3, [r4, #12]
 800415e:	6560      	str	r0, [r4, #84]	; 0x54
 8004160:	e7f8      	b.n	8004154 <__sseek+0x18>
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	ffffefff 	.word	0xffffefff

08004168 <__sclose>:
 8004168:	b510      	push	{r4, lr}
 800416a:	230e      	movs	r3, #14
 800416c:	5ec9      	ldrsh	r1, [r1, r3]
 800416e:	f000 f809 	bl	8004184 <_close_r>
 8004172:	bd10      	pop	{r4, pc}

08004174 <memset>:
 8004174:	0003      	movs	r3, r0
 8004176:	1882      	adds	r2, r0, r2
 8004178:	4293      	cmp	r3, r2
 800417a:	d100      	bne.n	800417e <memset+0xa>
 800417c:	4770      	bx	lr
 800417e:	7019      	strb	r1, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	e7f9      	b.n	8004178 <memset+0x4>

08004184 <_close_r>:
 8004184:	2300      	movs	r3, #0
 8004186:	b570      	push	{r4, r5, r6, lr}
 8004188:	4d06      	ldr	r5, [pc, #24]	; (80041a4 <_close_r+0x20>)
 800418a:	0004      	movs	r4, r0
 800418c:	0008      	movs	r0, r1
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	f7fc fd58 	bl	8000c44 <_close>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d103      	bne.n	80041a0 <_close_r+0x1c>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d000      	beq.n	80041a0 <_close_r+0x1c>
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	20000334 	.word	0x20000334

080041a8 <_lseek_r>:
 80041a8:	b570      	push	{r4, r5, r6, lr}
 80041aa:	0004      	movs	r4, r0
 80041ac:	0008      	movs	r0, r1
 80041ae:	0011      	movs	r1, r2
 80041b0:	001a      	movs	r2, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	4d05      	ldr	r5, [pc, #20]	; (80041cc <_lseek_r+0x24>)
 80041b6:	602b      	str	r3, [r5, #0]
 80041b8:	f7fc fd65 	bl	8000c86 <_lseek>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d103      	bne.n	80041c8 <_lseek_r+0x20>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d000      	beq.n	80041c8 <_lseek_r+0x20>
 80041c6:	6023      	str	r3, [r4, #0]
 80041c8:	bd70      	pop	{r4, r5, r6, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	20000334 	.word	0x20000334

080041d0 <_read_r>:
 80041d0:	b570      	push	{r4, r5, r6, lr}
 80041d2:	0004      	movs	r4, r0
 80041d4:	0008      	movs	r0, r1
 80041d6:	0011      	movs	r1, r2
 80041d8:	001a      	movs	r2, r3
 80041da:	2300      	movs	r3, #0
 80041dc:	4d05      	ldr	r5, [pc, #20]	; (80041f4 <_read_r+0x24>)
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	f7fc fcf7 	bl	8000bd2 <_read>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	d103      	bne.n	80041f0 <_read_r+0x20>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d000      	beq.n	80041f0 <_read_r+0x20>
 80041ee:	6023      	str	r3, [r4, #0]
 80041f0:	bd70      	pop	{r4, r5, r6, pc}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	20000334 	.word	0x20000334

080041f8 <_write_r>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	0004      	movs	r4, r0
 80041fc:	0008      	movs	r0, r1
 80041fe:	0011      	movs	r1, r2
 8004200:	001a      	movs	r2, r3
 8004202:	2300      	movs	r3, #0
 8004204:	4d05      	ldr	r5, [pc, #20]	; (800421c <_write_r+0x24>)
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	f7fc fd00 	bl	8000c0c <_write>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d103      	bne.n	8004218 <_write_r+0x20>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d000      	beq.n	8004218 <_write_r+0x20>
 8004216:	6023      	str	r3, [r4, #0]
 8004218:	bd70      	pop	{r4, r5, r6, pc}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	20000334 	.word	0x20000334

08004220 <__errno>:
 8004220:	4b01      	ldr	r3, [pc, #4]	; (8004228 <__errno+0x8>)
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	4770      	bx	lr
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	20000064 	.word	0x20000064

0800422c <__libc_init_array>:
 800422c:	b570      	push	{r4, r5, r6, lr}
 800422e:	2600      	movs	r6, #0
 8004230:	4c0c      	ldr	r4, [pc, #48]	; (8004264 <__libc_init_array+0x38>)
 8004232:	4d0d      	ldr	r5, [pc, #52]	; (8004268 <__libc_init_array+0x3c>)
 8004234:	1b64      	subs	r4, r4, r5
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	42a6      	cmp	r6, r4
 800423a:	d109      	bne.n	8004250 <__libc_init_array+0x24>
 800423c:	2600      	movs	r6, #0
 800423e:	f000 fde3 	bl	8004e08 <_init>
 8004242:	4c0a      	ldr	r4, [pc, #40]	; (800426c <__libc_init_array+0x40>)
 8004244:	4d0a      	ldr	r5, [pc, #40]	; (8004270 <__libc_init_array+0x44>)
 8004246:	1b64      	subs	r4, r4, r5
 8004248:	10a4      	asrs	r4, r4, #2
 800424a:	42a6      	cmp	r6, r4
 800424c:	d105      	bne.n	800425a <__libc_init_array+0x2e>
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	00b3      	lsls	r3, r6, #2
 8004252:	58eb      	ldr	r3, [r5, r3]
 8004254:	4798      	blx	r3
 8004256:	3601      	adds	r6, #1
 8004258:	e7ee      	b.n	8004238 <__libc_init_array+0xc>
 800425a:	00b3      	lsls	r3, r6, #2
 800425c:	58eb      	ldr	r3, [r5, r3]
 800425e:	4798      	blx	r3
 8004260:	3601      	adds	r6, #1
 8004262:	e7f2      	b.n	800424a <__libc_init_array+0x1e>
 8004264:	08004f0c 	.word	0x08004f0c
 8004268:	08004f0c 	.word	0x08004f0c
 800426c:	08004f10 	.word	0x08004f10
 8004270:	08004f0c 	.word	0x08004f0c

08004274 <__retarget_lock_init_recursive>:
 8004274:	4770      	bx	lr

08004276 <__retarget_lock_acquire_recursive>:
 8004276:	4770      	bx	lr

08004278 <__retarget_lock_release_recursive>:
 8004278:	4770      	bx	lr
	...

0800427c <_free_r>:
 800427c:	b570      	push	{r4, r5, r6, lr}
 800427e:	0005      	movs	r5, r0
 8004280:	2900      	cmp	r1, #0
 8004282:	d010      	beq.n	80042a6 <_free_r+0x2a>
 8004284:	1f0c      	subs	r4, r1, #4
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	da00      	bge.n	800428e <_free_r+0x12>
 800428c:	18e4      	adds	r4, r4, r3
 800428e:	0028      	movs	r0, r5
 8004290:	f000 f8e2 	bl	8004458 <__malloc_lock>
 8004294:	4a1d      	ldr	r2, [pc, #116]	; (800430c <_free_r+0x90>)
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d105      	bne.n	80042a8 <_free_r+0x2c>
 800429c:	6063      	str	r3, [r4, #4]
 800429e:	6014      	str	r4, [r2, #0]
 80042a0:	0028      	movs	r0, r5
 80042a2:	f000 f8e1 	bl	8004468 <__malloc_unlock>
 80042a6:	bd70      	pop	{r4, r5, r6, pc}
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	d908      	bls.n	80042be <_free_r+0x42>
 80042ac:	6820      	ldr	r0, [r4, #0]
 80042ae:	1821      	adds	r1, r4, r0
 80042b0:	428b      	cmp	r3, r1
 80042b2:	d1f3      	bne.n	800429c <_free_r+0x20>
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	1809      	adds	r1, r1, r0
 80042ba:	6021      	str	r1, [r4, #0]
 80042bc:	e7ee      	b.n	800429c <_free_r+0x20>
 80042be:	001a      	movs	r2, r3
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <_free_r+0x4e>
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	d9f9      	bls.n	80042be <_free_r+0x42>
 80042ca:	6811      	ldr	r1, [r2, #0]
 80042cc:	1850      	adds	r0, r2, r1
 80042ce:	42a0      	cmp	r0, r4
 80042d0:	d10b      	bne.n	80042ea <_free_r+0x6e>
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	1809      	adds	r1, r1, r0
 80042d6:	1850      	adds	r0, r2, r1
 80042d8:	6011      	str	r1, [r2, #0]
 80042da:	4283      	cmp	r3, r0
 80042dc:	d1e0      	bne.n	80042a0 <_free_r+0x24>
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	1841      	adds	r1, r0, r1
 80042e4:	6011      	str	r1, [r2, #0]
 80042e6:	6053      	str	r3, [r2, #4]
 80042e8:	e7da      	b.n	80042a0 <_free_r+0x24>
 80042ea:	42a0      	cmp	r0, r4
 80042ec:	d902      	bls.n	80042f4 <_free_r+0x78>
 80042ee:	230c      	movs	r3, #12
 80042f0:	602b      	str	r3, [r5, #0]
 80042f2:	e7d5      	b.n	80042a0 <_free_r+0x24>
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	1821      	adds	r1, r4, r0
 80042f8:	428b      	cmp	r3, r1
 80042fa:	d103      	bne.n	8004304 <_free_r+0x88>
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	1809      	adds	r1, r1, r0
 8004302:	6021      	str	r1, [r4, #0]
 8004304:	6063      	str	r3, [r4, #4]
 8004306:	6054      	str	r4, [r2, #4]
 8004308:	e7ca      	b.n	80042a0 <_free_r+0x24>
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	2000033c 	.word	0x2000033c

08004310 <sbrk_aligned>:
 8004310:	b570      	push	{r4, r5, r6, lr}
 8004312:	4e0f      	ldr	r6, [pc, #60]	; (8004350 <sbrk_aligned+0x40>)
 8004314:	000d      	movs	r5, r1
 8004316:	6831      	ldr	r1, [r6, #0]
 8004318:	0004      	movs	r4, r0
 800431a:	2900      	cmp	r1, #0
 800431c:	d102      	bne.n	8004324 <sbrk_aligned+0x14>
 800431e:	f000 fccb 	bl	8004cb8 <_sbrk_r>
 8004322:	6030      	str	r0, [r6, #0]
 8004324:	0029      	movs	r1, r5
 8004326:	0020      	movs	r0, r4
 8004328:	f000 fcc6 	bl	8004cb8 <_sbrk_r>
 800432c:	1c43      	adds	r3, r0, #1
 800432e:	d00a      	beq.n	8004346 <sbrk_aligned+0x36>
 8004330:	2303      	movs	r3, #3
 8004332:	1cc5      	adds	r5, r0, #3
 8004334:	439d      	bics	r5, r3
 8004336:	42a8      	cmp	r0, r5
 8004338:	d007      	beq.n	800434a <sbrk_aligned+0x3a>
 800433a:	1a29      	subs	r1, r5, r0
 800433c:	0020      	movs	r0, r4
 800433e:	f000 fcbb 	bl	8004cb8 <_sbrk_r>
 8004342:	3001      	adds	r0, #1
 8004344:	d101      	bne.n	800434a <sbrk_aligned+0x3a>
 8004346:	2501      	movs	r5, #1
 8004348:	426d      	negs	r5, r5
 800434a:	0028      	movs	r0, r5
 800434c:	bd70      	pop	{r4, r5, r6, pc}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	20000340 	.word	0x20000340

08004354 <_malloc_r>:
 8004354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004356:	2203      	movs	r2, #3
 8004358:	1ccb      	adds	r3, r1, #3
 800435a:	4393      	bics	r3, r2
 800435c:	3308      	adds	r3, #8
 800435e:	0006      	movs	r6, r0
 8004360:	001f      	movs	r7, r3
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d238      	bcs.n	80043d8 <_malloc_r+0x84>
 8004366:	270c      	movs	r7, #12
 8004368:	42b9      	cmp	r1, r7
 800436a:	d837      	bhi.n	80043dc <_malloc_r+0x88>
 800436c:	0030      	movs	r0, r6
 800436e:	f000 f873 	bl	8004458 <__malloc_lock>
 8004372:	4b38      	ldr	r3, [pc, #224]	; (8004454 <_malloc_r+0x100>)
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	001c      	movs	r4, r3
 800437a:	2c00      	cmp	r4, #0
 800437c:	d133      	bne.n	80043e6 <_malloc_r+0x92>
 800437e:	0039      	movs	r1, r7
 8004380:	0030      	movs	r0, r6
 8004382:	f7ff ffc5 	bl	8004310 <sbrk_aligned>
 8004386:	0004      	movs	r4, r0
 8004388:	1c43      	adds	r3, r0, #1
 800438a:	d15e      	bne.n	800444a <_malloc_r+0xf6>
 800438c:	9b00      	ldr	r3, [sp, #0]
 800438e:	681c      	ldr	r4, [r3, #0]
 8004390:	0025      	movs	r5, r4
 8004392:	2d00      	cmp	r5, #0
 8004394:	d14e      	bne.n	8004434 <_malloc_r+0xe0>
 8004396:	2c00      	cmp	r4, #0
 8004398:	d051      	beq.n	800443e <_malloc_r+0xea>
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0029      	movs	r1, r5
 800439e:	18e3      	adds	r3, r4, r3
 80043a0:	0030      	movs	r0, r6
 80043a2:	9301      	str	r3, [sp, #4]
 80043a4:	f000 fc88 	bl	8004cb8 <_sbrk_r>
 80043a8:	9b01      	ldr	r3, [sp, #4]
 80043aa:	4283      	cmp	r3, r0
 80043ac:	d147      	bne.n	800443e <_malloc_r+0xea>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	0030      	movs	r0, r6
 80043b2:	1aff      	subs	r7, r7, r3
 80043b4:	0039      	movs	r1, r7
 80043b6:	f7ff ffab 	bl	8004310 <sbrk_aligned>
 80043ba:	3001      	adds	r0, #1
 80043bc:	d03f      	beq.n	800443e <_malloc_r+0xea>
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	19db      	adds	r3, r3, r7
 80043c2:	6023      	str	r3, [r4, #0]
 80043c4:	9b00      	ldr	r3, [sp, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d040      	beq.n	800444e <_malloc_r+0xfa>
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	42a2      	cmp	r2, r4
 80043d0:	d133      	bne.n	800443a <_malloc_r+0xe6>
 80043d2:	2200      	movs	r2, #0
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	e014      	b.n	8004402 <_malloc_r+0xae>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	dac5      	bge.n	8004368 <_malloc_r+0x14>
 80043dc:	230c      	movs	r3, #12
 80043de:	2500      	movs	r5, #0
 80043e0:	6033      	str	r3, [r6, #0]
 80043e2:	0028      	movs	r0, r5
 80043e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	1bc9      	subs	r1, r1, r7
 80043ea:	d420      	bmi.n	800442e <_malloc_r+0xda>
 80043ec:	290b      	cmp	r1, #11
 80043ee:	d918      	bls.n	8004422 <_malloc_r+0xce>
 80043f0:	19e2      	adds	r2, r4, r7
 80043f2:	6027      	str	r7, [r4, #0]
 80043f4:	42a3      	cmp	r3, r4
 80043f6:	d112      	bne.n	800441e <_malloc_r+0xca>
 80043f8:	9b00      	ldr	r3, [sp, #0]
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	6863      	ldr	r3, [r4, #4]
 80043fe:	6011      	str	r1, [r2, #0]
 8004400:	6053      	str	r3, [r2, #4]
 8004402:	0030      	movs	r0, r6
 8004404:	0025      	movs	r5, r4
 8004406:	f000 f82f 	bl	8004468 <__malloc_unlock>
 800440a:	2207      	movs	r2, #7
 800440c:	350b      	adds	r5, #11
 800440e:	1d23      	adds	r3, r4, #4
 8004410:	4395      	bics	r5, r2
 8004412:	1aea      	subs	r2, r5, r3
 8004414:	429d      	cmp	r5, r3
 8004416:	d0e4      	beq.n	80043e2 <_malloc_r+0x8e>
 8004418:	1b5b      	subs	r3, r3, r5
 800441a:	50a3      	str	r3, [r4, r2]
 800441c:	e7e1      	b.n	80043e2 <_malloc_r+0x8e>
 800441e:	605a      	str	r2, [r3, #4]
 8004420:	e7ec      	b.n	80043fc <_malloc_r+0xa8>
 8004422:	6862      	ldr	r2, [r4, #4]
 8004424:	42a3      	cmp	r3, r4
 8004426:	d1d5      	bne.n	80043d4 <_malloc_r+0x80>
 8004428:	9b00      	ldr	r3, [sp, #0]
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	e7e9      	b.n	8004402 <_malloc_r+0xae>
 800442e:	0023      	movs	r3, r4
 8004430:	6864      	ldr	r4, [r4, #4]
 8004432:	e7a2      	b.n	800437a <_malloc_r+0x26>
 8004434:	002c      	movs	r4, r5
 8004436:	686d      	ldr	r5, [r5, #4]
 8004438:	e7ab      	b.n	8004392 <_malloc_r+0x3e>
 800443a:	0013      	movs	r3, r2
 800443c:	e7c4      	b.n	80043c8 <_malloc_r+0x74>
 800443e:	230c      	movs	r3, #12
 8004440:	0030      	movs	r0, r6
 8004442:	6033      	str	r3, [r6, #0]
 8004444:	f000 f810 	bl	8004468 <__malloc_unlock>
 8004448:	e7cb      	b.n	80043e2 <_malloc_r+0x8e>
 800444a:	6027      	str	r7, [r4, #0]
 800444c:	e7d9      	b.n	8004402 <_malloc_r+0xae>
 800444e:	605b      	str	r3, [r3, #4]
 8004450:	deff      	udf	#255	; 0xff
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	2000033c 	.word	0x2000033c

08004458 <__malloc_lock>:
 8004458:	b510      	push	{r4, lr}
 800445a:	4802      	ldr	r0, [pc, #8]	; (8004464 <__malloc_lock+0xc>)
 800445c:	f7ff ff0b 	bl	8004276 <__retarget_lock_acquire_recursive>
 8004460:	bd10      	pop	{r4, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	20000338 	.word	0x20000338

08004468 <__malloc_unlock>:
 8004468:	b510      	push	{r4, lr}
 800446a:	4802      	ldr	r0, [pc, #8]	; (8004474 <__malloc_unlock+0xc>)
 800446c:	f7ff ff04 	bl	8004278 <__retarget_lock_release_recursive>
 8004470:	bd10      	pop	{r4, pc}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	20000338 	.word	0x20000338

08004478 <__sfputc_r>:
 8004478:	6893      	ldr	r3, [r2, #8]
 800447a:	b510      	push	{r4, lr}
 800447c:	3b01      	subs	r3, #1
 800447e:	6093      	str	r3, [r2, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	da04      	bge.n	800448e <__sfputc_r+0x16>
 8004484:	6994      	ldr	r4, [r2, #24]
 8004486:	42a3      	cmp	r3, r4
 8004488:	db07      	blt.n	800449a <__sfputc_r+0x22>
 800448a:	290a      	cmp	r1, #10
 800448c:	d005      	beq.n	800449a <__sfputc_r+0x22>
 800448e:	6813      	ldr	r3, [r2, #0]
 8004490:	1c58      	adds	r0, r3, #1
 8004492:	6010      	str	r0, [r2, #0]
 8004494:	7019      	strb	r1, [r3, #0]
 8004496:	0008      	movs	r0, r1
 8004498:	bd10      	pop	{r4, pc}
 800449a:	f000 fb66 	bl	8004b6a <__swbuf_r>
 800449e:	0001      	movs	r1, r0
 80044a0:	e7f9      	b.n	8004496 <__sfputc_r+0x1e>

080044a2 <__sfputs_r>:
 80044a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044a4:	0006      	movs	r6, r0
 80044a6:	000f      	movs	r7, r1
 80044a8:	0014      	movs	r4, r2
 80044aa:	18d5      	adds	r5, r2, r3
 80044ac:	42ac      	cmp	r4, r5
 80044ae:	d101      	bne.n	80044b4 <__sfputs_r+0x12>
 80044b0:	2000      	movs	r0, #0
 80044b2:	e007      	b.n	80044c4 <__sfputs_r+0x22>
 80044b4:	7821      	ldrb	r1, [r4, #0]
 80044b6:	003a      	movs	r2, r7
 80044b8:	0030      	movs	r0, r6
 80044ba:	f7ff ffdd 	bl	8004478 <__sfputc_r>
 80044be:	3401      	adds	r4, #1
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d1f3      	bne.n	80044ac <__sfputs_r+0xa>
 80044c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044c8 <_vfiprintf_r>:
 80044c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ca:	b0a1      	sub	sp, #132	; 0x84
 80044cc:	000f      	movs	r7, r1
 80044ce:	0015      	movs	r5, r2
 80044d0:	001e      	movs	r6, r3
 80044d2:	9003      	str	r0, [sp, #12]
 80044d4:	2800      	cmp	r0, #0
 80044d6:	d004      	beq.n	80044e2 <_vfiprintf_r+0x1a>
 80044d8:	6a03      	ldr	r3, [r0, #32]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <_vfiprintf_r+0x1a>
 80044de:	f7ff fdb9 	bl	8004054 <__sinit>
 80044e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e4:	07db      	lsls	r3, r3, #31
 80044e6:	d405      	bmi.n	80044f4 <_vfiprintf_r+0x2c>
 80044e8:	89bb      	ldrh	r3, [r7, #12]
 80044ea:	059b      	lsls	r3, r3, #22
 80044ec:	d402      	bmi.n	80044f4 <_vfiprintf_r+0x2c>
 80044ee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80044f0:	f7ff fec1 	bl	8004276 <__retarget_lock_acquire_recursive>
 80044f4:	89bb      	ldrh	r3, [r7, #12]
 80044f6:	071b      	lsls	r3, r3, #28
 80044f8:	d502      	bpl.n	8004500 <_vfiprintf_r+0x38>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d113      	bne.n	8004528 <_vfiprintf_r+0x60>
 8004500:	0039      	movs	r1, r7
 8004502:	9803      	ldr	r0, [sp, #12]
 8004504:	f000 fb74 	bl	8004bf0 <__swsetup_r>
 8004508:	2800      	cmp	r0, #0
 800450a:	d00d      	beq.n	8004528 <_vfiprintf_r+0x60>
 800450c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800450e:	07db      	lsls	r3, r3, #31
 8004510:	d503      	bpl.n	800451a <_vfiprintf_r+0x52>
 8004512:	2001      	movs	r0, #1
 8004514:	4240      	negs	r0, r0
 8004516:	b021      	add	sp, #132	; 0x84
 8004518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800451a:	89bb      	ldrh	r3, [r7, #12]
 800451c:	059b      	lsls	r3, r3, #22
 800451e:	d4f8      	bmi.n	8004512 <_vfiprintf_r+0x4a>
 8004520:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004522:	f7ff fea9 	bl	8004278 <__retarget_lock_release_recursive>
 8004526:	e7f4      	b.n	8004512 <_vfiprintf_r+0x4a>
 8004528:	2300      	movs	r3, #0
 800452a:	ac08      	add	r4, sp, #32
 800452c:	6163      	str	r3, [r4, #20]
 800452e:	3320      	adds	r3, #32
 8004530:	7663      	strb	r3, [r4, #25]
 8004532:	3310      	adds	r3, #16
 8004534:	76a3      	strb	r3, [r4, #26]
 8004536:	9607      	str	r6, [sp, #28]
 8004538:	002e      	movs	r6, r5
 800453a:	7833      	ldrb	r3, [r6, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <_vfiprintf_r+0x7c>
 8004540:	2b25      	cmp	r3, #37	; 0x25
 8004542:	d148      	bne.n	80045d6 <_vfiprintf_r+0x10e>
 8004544:	1b73      	subs	r3, r6, r5
 8004546:	9305      	str	r3, [sp, #20]
 8004548:	42ae      	cmp	r6, r5
 800454a:	d00b      	beq.n	8004564 <_vfiprintf_r+0x9c>
 800454c:	002a      	movs	r2, r5
 800454e:	0039      	movs	r1, r7
 8004550:	9803      	ldr	r0, [sp, #12]
 8004552:	f7ff ffa6 	bl	80044a2 <__sfputs_r>
 8004556:	3001      	adds	r0, #1
 8004558:	d100      	bne.n	800455c <_vfiprintf_r+0x94>
 800455a:	e0af      	b.n	80046bc <_vfiprintf_r+0x1f4>
 800455c:	6963      	ldr	r3, [r4, #20]
 800455e:	9a05      	ldr	r2, [sp, #20]
 8004560:	189b      	adds	r3, r3, r2
 8004562:	6163      	str	r3, [r4, #20]
 8004564:	7833      	ldrb	r3, [r6, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d100      	bne.n	800456c <_vfiprintf_r+0xa4>
 800456a:	e0a7      	b.n	80046bc <_vfiprintf_r+0x1f4>
 800456c:	2201      	movs	r2, #1
 800456e:	2300      	movs	r3, #0
 8004570:	4252      	negs	r2, r2
 8004572:	6062      	str	r2, [r4, #4]
 8004574:	a904      	add	r1, sp, #16
 8004576:	3254      	adds	r2, #84	; 0x54
 8004578:	1852      	adds	r2, r2, r1
 800457a:	1c75      	adds	r5, r6, #1
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	60e3      	str	r3, [r4, #12]
 8004580:	60a3      	str	r3, [r4, #8]
 8004582:	7013      	strb	r3, [r2, #0]
 8004584:	65a3      	str	r3, [r4, #88]	; 0x58
 8004586:	4b59      	ldr	r3, [pc, #356]	; (80046ec <_vfiprintf_r+0x224>)
 8004588:	2205      	movs	r2, #5
 800458a:	0018      	movs	r0, r3
 800458c:	7829      	ldrb	r1, [r5, #0]
 800458e:	9305      	str	r3, [sp, #20]
 8004590:	f000 fba4 	bl	8004cdc <memchr>
 8004594:	1c6e      	adds	r6, r5, #1
 8004596:	2800      	cmp	r0, #0
 8004598:	d11f      	bne.n	80045da <_vfiprintf_r+0x112>
 800459a:	6822      	ldr	r2, [r4, #0]
 800459c:	06d3      	lsls	r3, r2, #27
 800459e:	d504      	bpl.n	80045aa <_vfiprintf_r+0xe2>
 80045a0:	2353      	movs	r3, #83	; 0x53
 80045a2:	a904      	add	r1, sp, #16
 80045a4:	185b      	adds	r3, r3, r1
 80045a6:	2120      	movs	r1, #32
 80045a8:	7019      	strb	r1, [r3, #0]
 80045aa:	0713      	lsls	r3, r2, #28
 80045ac:	d504      	bpl.n	80045b8 <_vfiprintf_r+0xf0>
 80045ae:	2353      	movs	r3, #83	; 0x53
 80045b0:	a904      	add	r1, sp, #16
 80045b2:	185b      	adds	r3, r3, r1
 80045b4:	212b      	movs	r1, #43	; 0x2b
 80045b6:	7019      	strb	r1, [r3, #0]
 80045b8:	782b      	ldrb	r3, [r5, #0]
 80045ba:	2b2a      	cmp	r3, #42	; 0x2a
 80045bc:	d016      	beq.n	80045ec <_vfiprintf_r+0x124>
 80045be:	002e      	movs	r6, r5
 80045c0:	2100      	movs	r1, #0
 80045c2:	200a      	movs	r0, #10
 80045c4:	68e3      	ldr	r3, [r4, #12]
 80045c6:	7832      	ldrb	r2, [r6, #0]
 80045c8:	1c75      	adds	r5, r6, #1
 80045ca:	3a30      	subs	r2, #48	; 0x30
 80045cc:	2a09      	cmp	r2, #9
 80045ce:	d94e      	bls.n	800466e <_vfiprintf_r+0x1a6>
 80045d0:	2900      	cmp	r1, #0
 80045d2:	d111      	bne.n	80045f8 <_vfiprintf_r+0x130>
 80045d4:	e017      	b.n	8004606 <_vfiprintf_r+0x13e>
 80045d6:	3601      	adds	r6, #1
 80045d8:	e7af      	b.n	800453a <_vfiprintf_r+0x72>
 80045da:	9b05      	ldr	r3, [sp, #20]
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	1ac0      	subs	r0, r0, r3
 80045e0:	2301      	movs	r3, #1
 80045e2:	4083      	lsls	r3, r0
 80045e4:	4313      	orrs	r3, r2
 80045e6:	0035      	movs	r5, r6
 80045e8:	6023      	str	r3, [r4, #0]
 80045ea:	e7cc      	b.n	8004586 <_vfiprintf_r+0xbe>
 80045ec:	9b07      	ldr	r3, [sp, #28]
 80045ee:	1d19      	adds	r1, r3, #4
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	9107      	str	r1, [sp, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db01      	blt.n	80045fc <_vfiprintf_r+0x134>
 80045f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80045fa:	e004      	b.n	8004606 <_vfiprintf_r+0x13e>
 80045fc:	425b      	negs	r3, r3
 80045fe:	60e3      	str	r3, [r4, #12]
 8004600:	2302      	movs	r3, #2
 8004602:	4313      	orrs	r3, r2
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	7833      	ldrb	r3, [r6, #0]
 8004608:	2b2e      	cmp	r3, #46	; 0x2e
 800460a:	d10a      	bne.n	8004622 <_vfiprintf_r+0x15a>
 800460c:	7873      	ldrb	r3, [r6, #1]
 800460e:	2b2a      	cmp	r3, #42	; 0x2a
 8004610:	d135      	bne.n	800467e <_vfiprintf_r+0x1b6>
 8004612:	9b07      	ldr	r3, [sp, #28]
 8004614:	3602      	adds	r6, #2
 8004616:	1d1a      	adds	r2, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	9207      	str	r2, [sp, #28]
 800461c:	2b00      	cmp	r3, #0
 800461e:	db2b      	blt.n	8004678 <_vfiprintf_r+0x1b0>
 8004620:	9309      	str	r3, [sp, #36]	; 0x24
 8004622:	4d33      	ldr	r5, [pc, #204]	; (80046f0 <_vfiprintf_r+0x228>)
 8004624:	2203      	movs	r2, #3
 8004626:	0028      	movs	r0, r5
 8004628:	7831      	ldrb	r1, [r6, #0]
 800462a:	f000 fb57 	bl	8004cdc <memchr>
 800462e:	2800      	cmp	r0, #0
 8004630:	d006      	beq.n	8004640 <_vfiprintf_r+0x178>
 8004632:	2340      	movs	r3, #64	; 0x40
 8004634:	1b40      	subs	r0, r0, r5
 8004636:	4083      	lsls	r3, r0
 8004638:	6822      	ldr	r2, [r4, #0]
 800463a:	3601      	adds	r6, #1
 800463c:	4313      	orrs	r3, r2
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	7831      	ldrb	r1, [r6, #0]
 8004642:	2206      	movs	r2, #6
 8004644:	482b      	ldr	r0, [pc, #172]	; (80046f4 <_vfiprintf_r+0x22c>)
 8004646:	1c75      	adds	r5, r6, #1
 8004648:	7621      	strb	r1, [r4, #24]
 800464a:	f000 fb47 	bl	8004cdc <memchr>
 800464e:	2800      	cmp	r0, #0
 8004650:	d043      	beq.n	80046da <_vfiprintf_r+0x212>
 8004652:	4b29      	ldr	r3, [pc, #164]	; (80046f8 <_vfiprintf_r+0x230>)
 8004654:	2b00      	cmp	r3, #0
 8004656:	d125      	bne.n	80046a4 <_vfiprintf_r+0x1dc>
 8004658:	2207      	movs	r2, #7
 800465a:	9b07      	ldr	r3, [sp, #28]
 800465c:	3307      	adds	r3, #7
 800465e:	4393      	bics	r3, r2
 8004660:	3308      	adds	r3, #8
 8004662:	9307      	str	r3, [sp, #28]
 8004664:	6963      	ldr	r3, [r4, #20]
 8004666:	9a04      	ldr	r2, [sp, #16]
 8004668:	189b      	adds	r3, r3, r2
 800466a:	6163      	str	r3, [r4, #20]
 800466c:	e764      	b.n	8004538 <_vfiprintf_r+0x70>
 800466e:	4343      	muls	r3, r0
 8004670:	002e      	movs	r6, r5
 8004672:	2101      	movs	r1, #1
 8004674:	189b      	adds	r3, r3, r2
 8004676:	e7a6      	b.n	80045c6 <_vfiprintf_r+0xfe>
 8004678:	2301      	movs	r3, #1
 800467a:	425b      	negs	r3, r3
 800467c:	e7d0      	b.n	8004620 <_vfiprintf_r+0x158>
 800467e:	2300      	movs	r3, #0
 8004680:	200a      	movs	r0, #10
 8004682:	001a      	movs	r2, r3
 8004684:	3601      	adds	r6, #1
 8004686:	6063      	str	r3, [r4, #4]
 8004688:	7831      	ldrb	r1, [r6, #0]
 800468a:	1c75      	adds	r5, r6, #1
 800468c:	3930      	subs	r1, #48	; 0x30
 800468e:	2909      	cmp	r1, #9
 8004690:	d903      	bls.n	800469a <_vfiprintf_r+0x1d2>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0c5      	beq.n	8004622 <_vfiprintf_r+0x15a>
 8004696:	9209      	str	r2, [sp, #36]	; 0x24
 8004698:	e7c3      	b.n	8004622 <_vfiprintf_r+0x15a>
 800469a:	4342      	muls	r2, r0
 800469c:	002e      	movs	r6, r5
 800469e:	2301      	movs	r3, #1
 80046a0:	1852      	adds	r2, r2, r1
 80046a2:	e7f1      	b.n	8004688 <_vfiprintf_r+0x1c0>
 80046a4:	aa07      	add	r2, sp, #28
 80046a6:	9200      	str	r2, [sp, #0]
 80046a8:	0021      	movs	r1, r4
 80046aa:	003a      	movs	r2, r7
 80046ac:	4b13      	ldr	r3, [pc, #76]	; (80046fc <_vfiprintf_r+0x234>)
 80046ae:	9803      	ldr	r0, [sp, #12]
 80046b0:	e000      	b.n	80046b4 <_vfiprintf_r+0x1ec>
 80046b2:	bf00      	nop
 80046b4:	9004      	str	r0, [sp, #16]
 80046b6:	9b04      	ldr	r3, [sp, #16]
 80046b8:	3301      	adds	r3, #1
 80046ba:	d1d3      	bne.n	8004664 <_vfiprintf_r+0x19c>
 80046bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046be:	07db      	lsls	r3, r3, #31
 80046c0:	d405      	bmi.n	80046ce <_vfiprintf_r+0x206>
 80046c2:	89bb      	ldrh	r3, [r7, #12]
 80046c4:	059b      	lsls	r3, r3, #22
 80046c6:	d402      	bmi.n	80046ce <_vfiprintf_r+0x206>
 80046c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80046ca:	f7ff fdd5 	bl	8004278 <__retarget_lock_release_recursive>
 80046ce:	89bb      	ldrh	r3, [r7, #12]
 80046d0:	065b      	lsls	r3, r3, #25
 80046d2:	d500      	bpl.n	80046d6 <_vfiprintf_r+0x20e>
 80046d4:	e71d      	b.n	8004512 <_vfiprintf_r+0x4a>
 80046d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80046d8:	e71d      	b.n	8004516 <_vfiprintf_r+0x4e>
 80046da:	aa07      	add	r2, sp, #28
 80046dc:	9200      	str	r2, [sp, #0]
 80046de:	0021      	movs	r1, r4
 80046e0:	003a      	movs	r2, r7
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <_vfiprintf_r+0x234>)
 80046e4:	9803      	ldr	r0, [sp, #12]
 80046e6:	f000 f87b 	bl	80047e0 <_printf_i>
 80046ea:	e7e3      	b.n	80046b4 <_vfiprintf_r+0x1ec>
 80046ec:	08004ed0 	.word	0x08004ed0
 80046f0:	08004ed6 	.word	0x08004ed6
 80046f4:	08004eda 	.word	0x08004eda
 80046f8:	00000000 	.word	0x00000000
 80046fc:	080044a3 	.word	0x080044a3

08004700 <_printf_common>:
 8004700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004702:	0016      	movs	r6, r2
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	688a      	ldr	r2, [r1, #8]
 8004708:	690b      	ldr	r3, [r1, #16]
 800470a:	000c      	movs	r4, r1
 800470c:	9000      	str	r0, [sp, #0]
 800470e:	4293      	cmp	r3, r2
 8004710:	da00      	bge.n	8004714 <_printf_common+0x14>
 8004712:	0013      	movs	r3, r2
 8004714:	0022      	movs	r2, r4
 8004716:	6033      	str	r3, [r6, #0]
 8004718:	3243      	adds	r2, #67	; 0x43
 800471a:	7812      	ldrb	r2, [r2, #0]
 800471c:	2a00      	cmp	r2, #0
 800471e:	d001      	beq.n	8004724 <_printf_common+0x24>
 8004720:	3301      	adds	r3, #1
 8004722:	6033      	str	r3, [r6, #0]
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	069b      	lsls	r3, r3, #26
 8004728:	d502      	bpl.n	8004730 <_printf_common+0x30>
 800472a:	6833      	ldr	r3, [r6, #0]
 800472c:	3302      	adds	r3, #2
 800472e:	6033      	str	r3, [r6, #0]
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	2306      	movs	r3, #6
 8004734:	0015      	movs	r5, r2
 8004736:	401d      	ands	r5, r3
 8004738:	421a      	tst	r2, r3
 800473a:	d027      	beq.n	800478c <_printf_common+0x8c>
 800473c:	0023      	movs	r3, r4
 800473e:	3343      	adds	r3, #67	; 0x43
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	4193      	sbcs	r3, r2
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	0692      	lsls	r2, r2, #26
 800474a:	d430      	bmi.n	80047ae <_printf_common+0xae>
 800474c:	0022      	movs	r2, r4
 800474e:	9901      	ldr	r1, [sp, #4]
 8004750:	9800      	ldr	r0, [sp, #0]
 8004752:	9d08      	ldr	r5, [sp, #32]
 8004754:	3243      	adds	r2, #67	; 0x43
 8004756:	47a8      	blx	r5
 8004758:	3001      	adds	r0, #1
 800475a:	d025      	beq.n	80047a8 <_printf_common+0xa8>
 800475c:	2206      	movs	r2, #6
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	2500      	movs	r5, #0
 8004762:	4013      	ands	r3, r2
 8004764:	2b04      	cmp	r3, #4
 8004766:	d105      	bne.n	8004774 <_printf_common+0x74>
 8004768:	6833      	ldr	r3, [r6, #0]
 800476a:	68e5      	ldr	r5, [r4, #12]
 800476c:	1aed      	subs	r5, r5, r3
 800476e:	43eb      	mvns	r3, r5
 8004770:	17db      	asrs	r3, r3, #31
 8004772:	401d      	ands	r5, r3
 8004774:	68a3      	ldr	r3, [r4, #8]
 8004776:	6922      	ldr	r2, [r4, #16]
 8004778:	4293      	cmp	r3, r2
 800477a:	dd01      	ble.n	8004780 <_printf_common+0x80>
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	18ed      	adds	r5, r5, r3
 8004780:	2600      	movs	r6, #0
 8004782:	42b5      	cmp	r5, r6
 8004784:	d120      	bne.n	80047c8 <_printf_common+0xc8>
 8004786:	2000      	movs	r0, #0
 8004788:	e010      	b.n	80047ac <_printf_common+0xac>
 800478a:	3501      	adds	r5, #1
 800478c:	68e3      	ldr	r3, [r4, #12]
 800478e:	6832      	ldr	r2, [r6, #0]
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	42ab      	cmp	r3, r5
 8004794:	ddd2      	ble.n	800473c <_printf_common+0x3c>
 8004796:	0022      	movs	r2, r4
 8004798:	2301      	movs	r3, #1
 800479a:	9901      	ldr	r1, [sp, #4]
 800479c:	9800      	ldr	r0, [sp, #0]
 800479e:	9f08      	ldr	r7, [sp, #32]
 80047a0:	3219      	adds	r2, #25
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	d1f0      	bne.n	800478a <_printf_common+0x8a>
 80047a8:	2001      	movs	r0, #1
 80047aa:	4240      	negs	r0, r0
 80047ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047ae:	2030      	movs	r0, #48	; 0x30
 80047b0:	18e1      	adds	r1, r4, r3
 80047b2:	3143      	adds	r1, #67	; 0x43
 80047b4:	7008      	strb	r0, [r1, #0]
 80047b6:	0021      	movs	r1, r4
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	3145      	adds	r1, #69	; 0x45
 80047bc:	7809      	ldrb	r1, [r1, #0]
 80047be:	18a2      	adds	r2, r4, r2
 80047c0:	3243      	adds	r2, #67	; 0x43
 80047c2:	3302      	adds	r3, #2
 80047c4:	7011      	strb	r1, [r2, #0]
 80047c6:	e7c1      	b.n	800474c <_printf_common+0x4c>
 80047c8:	0022      	movs	r2, r4
 80047ca:	2301      	movs	r3, #1
 80047cc:	9901      	ldr	r1, [sp, #4]
 80047ce:	9800      	ldr	r0, [sp, #0]
 80047d0:	9f08      	ldr	r7, [sp, #32]
 80047d2:	321a      	adds	r2, #26
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	d0e6      	beq.n	80047a8 <_printf_common+0xa8>
 80047da:	3601      	adds	r6, #1
 80047dc:	e7d1      	b.n	8004782 <_printf_common+0x82>
	...

080047e0 <_printf_i>:
 80047e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047e2:	b08b      	sub	sp, #44	; 0x2c
 80047e4:	9206      	str	r2, [sp, #24]
 80047e6:	000a      	movs	r2, r1
 80047e8:	3243      	adds	r2, #67	; 0x43
 80047ea:	9307      	str	r3, [sp, #28]
 80047ec:	9005      	str	r0, [sp, #20]
 80047ee:	9204      	str	r2, [sp, #16]
 80047f0:	7e0a      	ldrb	r2, [r1, #24]
 80047f2:	000c      	movs	r4, r1
 80047f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80047f6:	2a78      	cmp	r2, #120	; 0x78
 80047f8:	d809      	bhi.n	800480e <_printf_i+0x2e>
 80047fa:	2a62      	cmp	r2, #98	; 0x62
 80047fc:	d80b      	bhi.n	8004816 <_printf_i+0x36>
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d100      	bne.n	8004804 <_printf_i+0x24>
 8004802:	e0be      	b.n	8004982 <_printf_i+0x1a2>
 8004804:	497c      	ldr	r1, [pc, #496]	; (80049f8 <_printf_i+0x218>)
 8004806:	9103      	str	r1, [sp, #12]
 8004808:	2a58      	cmp	r2, #88	; 0x58
 800480a:	d100      	bne.n	800480e <_printf_i+0x2e>
 800480c:	e093      	b.n	8004936 <_printf_i+0x156>
 800480e:	0026      	movs	r6, r4
 8004810:	3642      	adds	r6, #66	; 0x42
 8004812:	7032      	strb	r2, [r6, #0]
 8004814:	e022      	b.n	800485c <_printf_i+0x7c>
 8004816:	0010      	movs	r0, r2
 8004818:	3863      	subs	r0, #99	; 0x63
 800481a:	2815      	cmp	r0, #21
 800481c:	d8f7      	bhi.n	800480e <_printf_i+0x2e>
 800481e:	f7fb fc71 	bl	8000104 <__gnu_thumb1_case_shi>
 8004822:	0016      	.short	0x0016
 8004824:	fff6001f 	.word	0xfff6001f
 8004828:	fff6fff6 	.word	0xfff6fff6
 800482c:	001ffff6 	.word	0x001ffff6
 8004830:	fff6fff6 	.word	0xfff6fff6
 8004834:	fff6fff6 	.word	0xfff6fff6
 8004838:	003600a3 	.word	0x003600a3
 800483c:	fff60083 	.word	0xfff60083
 8004840:	00b4fff6 	.word	0x00b4fff6
 8004844:	0036fff6 	.word	0x0036fff6
 8004848:	fff6fff6 	.word	0xfff6fff6
 800484c:	0087      	.short	0x0087
 800484e:	0026      	movs	r6, r4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	3642      	adds	r6, #66	; 0x42
 8004854:	1d11      	adds	r1, r2, #4
 8004856:	6019      	str	r1, [r3, #0]
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	7033      	strb	r3, [r6, #0]
 800485c:	2301      	movs	r3, #1
 800485e:	e0a2      	b.n	80049a6 <_printf_i+0x1c6>
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	6809      	ldr	r1, [r1, #0]
 8004864:	1d02      	adds	r2, r0, #4
 8004866:	060d      	lsls	r5, r1, #24
 8004868:	d50b      	bpl.n	8004882 <_printf_i+0xa2>
 800486a:	6805      	ldr	r5, [r0, #0]
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	2d00      	cmp	r5, #0
 8004870:	da03      	bge.n	800487a <_printf_i+0x9a>
 8004872:	232d      	movs	r3, #45	; 0x2d
 8004874:	9a04      	ldr	r2, [sp, #16]
 8004876:	426d      	negs	r5, r5
 8004878:	7013      	strb	r3, [r2, #0]
 800487a:	4b5f      	ldr	r3, [pc, #380]	; (80049f8 <_printf_i+0x218>)
 800487c:	270a      	movs	r7, #10
 800487e:	9303      	str	r3, [sp, #12]
 8004880:	e01b      	b.n	80048ba <_printf_i+0xda>
 8004882:	6805      	ldr	r5, [r0, #0]
 8004884:	601a      	str	r2, [r3, #0]
 8004886:	0649      	lsls	r1, r1, #25
 8004888:	d5f1      	bpl.n	800486e <_printf_i+0x8e>
 800488a:	b22d      	sxth	r5, r5
 800488c:	e7ef      	b.n	800486e <_printf_i+0x8e>
 800488e:	680d      	ldr	r5, [r1, #0]
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	1d08      	adds	r0, r1, #4
 8004894:	6018      	str	r0, [r3, #0]
 8004896:	062e      	lsls	r6, r5, #24
 8004898:	d501      	bpl.n	800489e <_printf_i+0xbe>
 800489a:	680d      	ldr	r5, [r1, #0]
 800489c:	e003      	b.n	80048a6 <_printf_i+0xc6>
 800489e:	066d      	lsls	r5, r5, #25
 80048a0:	d5fb      	bpl.n	800489a <_printf_i+0xba>
 80048a2:	680d      	ldr	r5, [r1, #0]
 80048a4:	b2ad      	uxth	r5, r5
 80048a6:	4b54      	ldr	r3, [pc, #336]	; (80049f8 <_printf_i+0x218>)
 80048a8:	2708      	movs	r7, #8
 80048aa:	9303      	str	r3, [sp, #12]
 80048ac:	2a6f      	cmp	r2, #111	; 0x6f
 80048ae:	d000      	beq.n	80048b2 <_printf_i+0xd2>
 80048b0:	3702      	adds	r7, #2
 80048b2:	0023      	movs	r3, r4
 80048b4:	2200      	movs	r2, #0
 80048b6:	3343      	adds	r3, #67	; 0x43
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	6863      	ldr	r3, [r4, #4]
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	db03      	blt.n	80048ca <_printf_i+0xea>
 80048c2:	2104      	movs	r1, #4
 80048c4:	6822      	ldr	r2, [r4, #0]
 80048c6:	438a      	bics	r2, r1
 80048c8:	6022      	str	r2, [r4, #0]
 80048ca:	2d00      	cmp	r5, #0
 80048cc:	d102      	bne.n	80048d4 <_printf_i+0xf4>
 80048ce:	9e04      	ldr	r6, [sp, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00c      	beq.n	80048ee <_printf_i+0x10e>
 80048d4:	9e04      	ldr	r6, [sp, #16]
 80048d6:	0028      	movs	r0, r5
 80048d8:	0039      	movs	r1, r7
 80048da:	f7fb fca3 	bl	8000224 <__aeabi_uidivmod>
 80048de:	9b03      	ldr	r3, [sp, #12]
 80048e0:	3e01      	subs	r6, #1
 80048e2:	5c5b      	ldrb	r3, [r3, r1]
 80048e4:	7033      	strb	r3, [r6, #0]
 80048e6:	002b      	movs	r3, r5
 80048e8:	0005      	movs	r5, r0
 80048ea:	429f      	cmp	r7, r3
 80048ec:	d9f3      	bls.n	80048d6 <_printf_i+0xf6>
 80048ee:	2f08      	cmp	r7, #8
 80048f0:	d109      	bne.n	8004906 <_printf_i+0x126>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	07db      	lsls	r3, r3, #31
 80048f6:	d506      	bpl.n	8004906 <_printf_i+0x126>
 80048f8:	6862      	ldr	r2, [r4, #4]
 80048fa:	6923      	ldr	r3, [r4, #16]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	dc02      	bgt.n	8004906 <_printf_i+0x126>
 8004900:	2330      	movs	r3, #48	; 0x30
 8004902:	3e01      	subs	r6, #1
 8004904:	7033      	strb	r3, [r6, #0]
 8004906:	9b04      	ldr	r3, [sp, #16]
 8004908:	1b9b      	subs	r3, r3, r6
 800490a:	6123      	str	r3, [r4, #16]
 800490c:	9b07      	ldr	r3, [sp, #28]
 800490e:	0021      	movs	r1, r4
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	9805      	ldr	r0, [sp, #20]
 8004914:	9b06      	ldr	r3, [sp, #24]
 8004916:	aa09      	add	r2, sp, #36	; 0x24
 8004918:	f7ff fef2 	bl	8004700 <_printf_common>
 800491c:	3001      	adds	r0, #1
 800491e:	d147      	bne.n	80049b0 <_printf_i+0x1d0>
 8004920:	2001      	movs	r0, #1
 8004922:	4240      	negs	r0, r0
 8004924:	b00b      	add	sp, #44	; 0x2c
 8004926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004928:	2220      	movs	r2, #32
 800492a:	6809      	ldr	r1, [r1, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	6022      	str	r2, [r4, #0]
 8004930:	2278      	movs	r2, #120	; 0x78
 8004932:	4932      	ldr	r1, [pc, #200]	; (80049fc <_printf_i+0x21c>)
 8004934:	9103      	str	r1, [sp, #12]
 8004936:	0021      	movs	r1, r4
 8004938:	3145      	adds	r1, #69	; 0x45
 800493a:	700a      	strb	r2, [r1, #0]
 800493c:	6819      	ldr	r1, [r3, #0]
 800493e:	6822      	ldr	r2, [r4, #0]
 8004940:	c920      	ldmia	r1!, {r5}
 8004942:	0610      	lsls	r0, r2, #24
 8004944:	d402      	bmi.n	800494c <_printf_i+0x16c>
 8004946:	0650      	lsls	r0, r2, #25
 8004948:	d500      	bpl.n	800494c <_printf_i+0x16c>
 800494a:	b2ad      	uxth	r5, r5
 800494c:	6019      	str	r1, [r3, #0]
 800494e:	07d3      	lsls	r3, r2, #31
 8004950:	d502      	bpl.n	8004958 <_printf_i+0x178>
 8004952:	2320      	movs	r3, #32
 8004954:	4313      	orrs	r3, r2
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	2710      	movs	r7, #16
 800495a:	2d00      	cmp	r5, #0
 800495c:	d1a9      	bne.n	80048b2 <_printf_i+0xd2>
 800495e:	2220      	movs	r2, #32
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	4393      	bics	r3, r2
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	e7a4      	b.n	80048b2 <_printf_i+0xd2>
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	680d      	ldr	r5, [r1, #0]
 800496c:	1d10      	adds	r0, r2, #4
 800496e:	6949      	ldr	r1, [r1, #20]
 8004970:	6018      	str	r0, [r3, #0]
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	062e      	lsls	r6, r5, #24
 8004976:	d501      	bpl.n	800497c <_printf_i+0x19c>
 8004978:	6019      	str	r1, [r3, #0]
 800497a:	e002      	b.n	8004982 <_printf_i+0x1a2>
 800497c:	066d      	lsls	r5, r5, #25
 800497e:	d5fb      	bpl.n	8004978 <_printf_i+0x198>
 8004980:	8019      	strh	r1, [r3, #0]
 8004982:	2300      	movs	r3, #0
 8004984:	9e04      	ldr	r6, [sp, #16]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	e7c0      	b.n	800490c <_printf_i+0x12c>
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	1d11      	adds	r1, r2, #4
 800498e:	6019      	str	r1, [r3, #0]
 8004990:	6816      	ldr	r6, [r2, #0]
 8004992:	2100      	movs	r1, #0
 8004994:	0030      	movs	r0, r6
 8004996:	6862      	ldr	r2, [r4, #4]
 8004998:	f000 f9a0 	bl	8004cdc <memchr>
 800499c:	2800      	cmp	r0, #0
 800499e:	d001      	beq.n	80049a4 <_printf_i+0x1c4>
 80049a0:	1b80      	subs	r0, r0, r6
 80049a2:	6060      	str	r0, [r4, #4]
 80049a4:	6863      	ldr	r3, [r4, #4]
 80049a6:	6123      	str	r3, [r4, #16]
 80049a8:	2300      	movs	r3, #0
 80049aa:	9a04      	ldr	r2, [sp, #16]
 80049ac:	7013      	strb	r3, [r2, #0]
 80049ae:	e7ad      	b.n	800490c <_printf_i+0x12c>
 80049b0:	0032      	movs	r2, r6
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	9906      	ldr	r1, [sp, #24]
 80049b6:	9805      	ldr	r0, [sp, #20]
 80049b8:	9d07      	ldr	r5, [sp, #28]
 80049ba:	47a8      	blx	r5
 80049bc:	3001      	adds	r0, #1
 80049be:	d0af      	beq.n	8004920 <_printf_i+0x140>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	079b      	lsls	r3, r3, #30
 80049c4:	d415      	bmi.n	80049f2 <_printf_i+0x212>
 80049c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c8:	68e0      	ldr	r0, [r4, #12]
 80049ca:	4298      	cmp	r0, r3
 80049cc:	daaa      	bge.n	8004924 <_printf_i+0x144>
 80049ce:	0018      	movs	r0, r3
 80049d0:	e7a8      	b.n	8004924 <_printf_i+0x144>
 80049d2:	0022      	movs	r2, r4
 80049d4:	2301      	movs	r3, #1
 80049d6:	9906      	ldr	r1, [sp, #24]
 80049d8:	9805      	ldr	r0, [sp, #20]
 80049da:	9e07      	ldr	r6, [sp, #28]
 80049dc:	3219      	adds	r2, #25
 80049de:	47b0      	blx	r6
 80049e0:	3001      	adds	r0, #1
 80049e2:	d09d      	beq.n	8004920 <_printf_i+0x140>
 80049e4:	3501      	adds	r5, #1
 80049e6:	68e3      	ldr	r3, [r4, #12]
 80049e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	42ab      	cmp	r3, r5
 80049ee:	dcf0      	bgt.n	80049d2 <_printf_i+0x1f2>
 80049f0:	e7e9      	b.n	80049c6 <_printf_i+0x1e6>
 80049f2:	2500      	movs	r5, #0
 80049f4:	e7f7      	b.n	80049e6 <_printf_i+0x206>
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	08004ee1 	.word	0x08004ee1
 80049fc:	08004ef2 	.word	0x08004ef2

08004a00 <__sflush_r>:
 8004a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a02:	898b      	ldrh	r3, [r1, #12]
 8004a04:	0005      	movs	r5, r0
 8004a06:	000c      	movs	r4, r1
 8004a08:	071a      	lsls	r2, r3, #28
 8004a0a:	d45c      	bmi.n	8004ac6 <__sflush_r+0xc6>
 8004a0c:	684a      	ldr	r2, [r1, #4]
 8004a0e:	2a00      	cmp	r2, #0
 8004a10:	dc04      	bgt.n	8004a1c <__sflush_r+0x1c>
 8004a12:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	dc01      	bgt.n	8004a1c <__sflush_r+0x1c>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a1c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a1e:	2f00      	cmp	r7, #0
 8004a20:	d0fa      	beq.n	8004a18 <__sflush_r+0x18>
 8004a22:	2200      	movs	r2, #0
 8004a24:	2080      	movs	r0, #128	; 0x80
 8004a26:	682e      	ldr	r6, [r5, #0]
 8004a28:	602a      	str	r2, [r5, #0]
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	0140      	lsls	r0, r0, #5
 8004a2e:	6a21      	ldr	r1, [r4, #32]
 8004a30:	4002      	ands	r2, r0
 8004a32:	4203      	tst	r3, r0
 8004a34:	d034      	beq.n	8004aa0 <__sflush_r+0xa0>
 8004a36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	075b      	lsls	r3, r3, #29
 8004a3c:	d506      	bpl.n	8004a4c <__sflush_r+0x4c>
 8004a3e:	6863      	ldr	r3, [r4, #4]
 8004a40:	1ac0      	subs	r0, r0, r3
 8004a42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <__sflush_r+0x4c>
 8004a48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a4a:	1ac0      	subs	r0, r0, r3
 8004a4c:	0002      	movs	r2, r0
 8004a4e:	2300      	movs	r3, #0
 8004a50:	0028      	movs	r0, r5
 8004a52:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a54:	6a21      	ldr	r1, [r4, #32]
 8004a56:	47b8      	blx	r7
 8004a58:	89a2      	ldrh	r2, [r4, #12]
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	d106      	bne.n	8004a6c <__sflush_r+0x6c>
 8004a5e:	6829      	ldr	r1, [r5, #0]
 8004a60:	291d      	cmp	r1, #29
 8004a62:	d82c      	bhi.n	8004abe <__sflush_r+0xbe>
 8004a64:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <__sflush_r+0x110>)
 8004a66:	410b      	asrs	r3, r1
 8004a68:	07db      	lsls	r3, r3, #31
 8004a6a:	d428      	bmi.n	8004abe <__sflush_r+0xbe>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6063      	str	r3, [r4, #4]
 8004a70:	6923      	ldr	r3, [r4, #16]
 8004a72:	6023      	str	r3, [r4, #0]
 8004a74:	04d2      	lsls	r2, r2, #19
 8004a76:	d505      	bpl.n	8004a84 <__sflush_r+0x84>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <__sflush_r+0x82>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d100      	bne.n	8004a84 <__sflush_r+0x84>
 8004a82:	6560      	str	r0, [r4, #84]	; 0x54
 8004a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a86:	602e      	str	r6, [r5, #0]
 8004a88:	2900      	cmp	r1, #0
 8004a8a:	d0c5      	beq.n	8004a18 <__sflush_r+0x18>
 8004a8c:	0023      	movs	r3, r4
 8004a8e:	3344      	adds	r3, #68	; 0x44
 8004a90:	4299      	cmp	r1, r3
 8004a92:	d002      	beq.n	8004a9a <__sflush_r+0x9a>
 8004a94:	0028      	movs	r0, r5
 8004a96:	f7ff fbf1 	bl	800427c <_free_r>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8004a9e:	e7bc      	b.n	8004a1a <__sflush_r+0x1a>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	0028      	movs	r0, r5
 8004aa4:	47b8      	blx	r7
 8004aa6:	1c43      	adds	r3, r0, #1
 8004aa8:	d1c6      	bne.n	8004a38 <__sflush_r+0x38>
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0c3      	beq.n	8004a38 <__sflush_r+0x38>
 8004ab0:	2b1d      	cmp	r3, #29
 8004ab2:	d001      	beq.n	8004ab8 <__sflush_r+0xb8>
 8004ab4:	2b16      	cmp	r3, #22
 8004ab6:	d101      	bne.n	8004abc <__sflush_r+0xbc>
 8004ab8:	602e      	str	r6, [r5, #0]
 8004aba:	e7ad      	b.n	8004a18 <__sflush_r+0x18>
 8004abc:	89a2      	ldrh	r2, [r4, #12]
 8004abe:	2340      	movs	r3, #64	; 0x40
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	81a3      	strh	r3, [r4, #12]
 8004ac4:	e7a9      	b.n	8004a1a <__sflush_r+0x1a>
 8004ac6:	690e      	ldr	r6, [r1, #16]
 8004ac8:	2e00      	cmp	r6, #0
 8004aca:	d0a5      	beq.n	8004a18 <__sflush_r+0x18>
 8004acc:	680f      	ldr	r7, [r1, #0]
 8004ace:	600e      	str	r6, [r1, #0]
 8004ad0:	1bba      	subs	r2, r7, r6
 8004ad2:	9201      	str	r2, [sp, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	079b      	lsls	r3, r3, #30
 8004ad8:	d100      	bne.n	8004adc <__sflush_r+0xdc>
 8004ada:	694a      	ldr	r2, [r1, #20]
 8004adc:	60a2      	str	r2, [r4, #8]
 8004ade:	9b01      	ldr	r3, [sp, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	dd99      	ble.n	8004a18 <__sflush_r+0x18>
 8004ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ae6:	0032      	movs	r2, r6
 8004ae8:	001f      	movs	r7, r3
 8004aea:	0028      	movs	r0, r5
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	6a21      	ldr	r1, [r4, #32]
 8004af0:	47b8      	blx	r7
 8004af2:	2800      	cmp	r0, #0
 8004af4:	dc06      	bgt.n	8004b04 <__sflush_r+0x104>
 8004af6:	2340      	movs	r3, #64	; 0x40
 8004af8:	2001      	movs	r0, #1
 8004afa:	89a2      	ldrh	r2, [r4, #12]
 8004afc:	4240      	negs	r0, r0
 8004afe:	4313      	orrs	r3, r2
 8004b00:	81a3      	strh	r3, [r4, #12]
 8004b02:	e78a      	b.n	8004a1a <__sflush_r+0x1a>
 8004b04:	9b01      	ldr	r3, [sp, #4]
 8004b06:	1836      	adds	r6, r6, r0
 8004b08:	1a1b      	subs	r3, r3, r0
 8004b0a:	9301      	str	r3, [sp, #4]
 8004b0c:	e7e7      	b.n	8004ade <__sflush_r+0xde>
 8004b0e:	46c0      	nop			; (mov r8, r8)
 8004b10:	dfbffffe 	.word	0xdfbffffe

08004b14 <_fflush_r>:
 8004b14:	690b      	ldr	r3, [r1, #16]
 8004b16:	b570      	push	{r4, r5, r6, lr}
 8004b18:	0005      	movs	r5, r0
 8004b1a:	000c      	movs	r4, r1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <_fflush_r+0x12>
 8004b20:	2500      	movs	r5, #0
 8004b22:	0028      	movs	r0, r5
 8004b24:	bd70      	pop	{r4, r5, r6, pc}
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d004      	beq.n	8004b34 <_fflush_r+0x20>
 8004b2a:	6a03      	ldr	r3, [r0, #32]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <_fflush_r+0x20>
 8004b30:	f7ff fa90 	bl	8004054 <__sinit>
 8004b34:	220c      	movs	r2, #12
 8004b36:	5ea3      	ldrsh	r3, [r4, r2]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f1      	beq.n	8004b20 <_fflush_r+0xc>
 8004b3c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b3e:	07d2      	lsls	r2, r2, #31
 8004b40:	d404      	bmi.n	8004b4c <_fflush_r+0x38>
 8004b42:	059b      	lsls	r3, r3, #22
 8004b44:	d402      	bmi.n	8004b4c <_fflush_r+0x38>
 8004b46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b48:	f7ff fb95 	bl	8004276 <__retarget_lock_acquire_recursive>
 8004b4c:	0028      	movs	r0, r5
 8004b4e:	0021      	movs	r1, r4
 8004b50:	f7ff ff56 	bl	8004a00 <__sflush_r>
 8004b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b56:	0005      	movs	r5, r0
 8004b58:	07db      	lsls	r3, r3, #31
 8004b5a:	d4e2      	bmi.n	8004b22 <_fflush_r+0xe>
 8004b5c:	89a3      	ldrh	r3, [r4, #12]
 8004b5e:	059b      	lsls	r3, r3, #22
 8004b60:	d4df      	bmi.n	8004b22 <_fflush_r+0xe>
 8004b62:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b64:	f7ff fb88 	bl	8004278 <__retarget_lock_release_recursive>
 8004b68:	e7db      	b.n	8004b22 <_fflush_r+0xe>

08004b6a <__swbuf_r>:
 8004b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6c:	0006      	movs	r6, r0
 8004b6e:	000d      	movs	r5, r1
 8004b70:	0014      	movs	r4, r2
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d004      	beq.n	8004b80 <__swbuf_r+0x16>
 8004b76:	6a03      	ldr	r3, [r0, #32]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <__swbuf_r+0x16>
 8004b7c:	f7ff fa6a 	bl	8004054 <__sinit>
 8004b80:	69a3      	ldr	r3, [r4, #24]
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	071b      	lsls	r3, r3, #28
 8004b88:	d528      	bpl.n	8004bdc <__swbuf_r+0x72>
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d025      	beq.n	8004bdc <__swbuf_r+0x72>
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	6820      	ldr	r0, [r4, #0]
 8004b94:	b2ef      	uxtb	r7, r5
 8004b96:	1ac0      	subs	r0, r0, r3
 8004b98:	6963      	ldr	r3, [r4, #20]
 8004b9a:	b2ed      	uxtb	r5, r5
 8004b9c:	4283      	cmp	r3, r0
 8004b9e:	dc05      	bgt.n	8004bac <__swbuf_r+0x42>
 8004ba0:	0021      	movs	r1, r4
 8004ba2:	0030      	movs	r0, r6
 8004ba4:	f7ff ffb6 	bl	8004b14 <_fflush_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d11d      	bne.n	8004be8 <__swbuf_r+0x7e>
 8004bac:	68a3      	ldr	r3, [r4, #8]
 8004bae:	3001      	adds	r0, #1
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	60a3      	str	r3, [r4, #8]
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	6022      	str	r2, [r4, #0]
 8004bba:	701f      	strb	r7, [r3, #0]
 8004bbc:	6963      	ldr	r3, [r4, #20]
 8004bbe:	4283      	cmp	r3, r0
 8004bc0:	d004      	beq.n	8004bcc <__swbuf_r+0x62>
 8004bc2:	89a3      	ldrh	r3, [r4, #12]
 8004bc4:	07db      	lsls	r3, r3, #31
 8004bc6:	d507      	bpl.n	8004bd8 <__swbuf_r+0x6e>
 8004bc8:	2d0a      	cmp	r5, #10
 8004bca:	d105      	bne.n	8004bd8 <__swbuf_r+0x6e>
 8004bcc:	0021      	movs	r1, r4
 8004bce:	0030      	movs	r0, r6
 8004bd0:	f7ff ffa0 	bl	8004b14 <_fflush_r>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d107      	bne.n	8004be8 <__swbuf_r+0x7e>
 8004bd8:	0028      	movs	r0, r5
 8004bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bdc:	0021      	movs	r1, r4
 8004bde:	0030      	movs	r0, r6
 8004be0:	f000 f806 	bl	8004bf0 <__swsetup_r>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	d0d3      	beq.n	8004b90 <__swbuf_r+0x26>
 8004be8:	2501      	movs	r5, #1
 8004bea:	426d      	negs	r5, r5
 8004bec:	e7f4      	b.n	8004bd8 <__swbuf_r+0x6e>
	...

08004bf0 <__swsetup_r>:
 8004bf0:	4b30      	ldr	r3, [pc, #192]	; (8004cb4 <__swsetup_r+0xc4>)
 8004bf2:	b570      	push	{r4, r5, r6, lr}
 8004bf4:	0005      	movs	r5, r0
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	000c      	movs	r4, r1
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d004      	beq.n	8004c08 <__swsetup_r+0x18>
 8004bfe:	6a03      	ldr	r3, [r0, #32]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <__swsetup_r+0x18>
 8004c04:	f7ff fa26 	bl	8004054 <__sinit>
 8004c08:	230c      	movs	r3, #12
 8004c0a:	5ee2      	ldrsh	r2, [r4, r3]
 8004c0c:	b293      	uxth	r3, r2
 8004c0e:	0711      	lsls	r1, r2, #28
 8004c10:	d423      	bmi.n	8004c5a <__swsetup_r+0x6a>
 8004c12:	06d9      	lsls	r1, r3, #27
 8004c14:	d407      	bmi.n	8004c26 <__swsetup_r+0x36>
 8004c16:	2309      	movs	r3, #9
 8004c18:	2001      	movs	r0, #1
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	3337      	adds	r3, #55	; 0x37
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	81a3      	strh	r3, [r4, #12]
 8004c22:	4240      	negs	r0, r0
 8004c24:	bd70      	pop	{r4, r5, r6, pc}
 8004c26:	075b      	lsls	r3, r3, #29
 8004c28:	d513      	bpl.n	8004c52 <__swsetup_r+0x62>
 8004c2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d008      	beq.n	8004c42 <__swsetup_r+0x52>
 8004c30:	0023      	movs	r3, r4
 8004c32:	3344      	adds	r3, #68	; 0x44
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d002      	beq.n	8004c3e <__swsetup_r+0x4e>
 8004c38:	0028      	movs	r0, r5
 8004c3a:	f7ff fb1f 	bl	800427c <_free_r>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6363      	str	r3, [r4, #52]	; 0x34
 8004c42:	2224      	movs	r2, #36	; 0x24
 8004c44:	89a3      	ldrh	r3, [r4, #12]
 8004c46:	4393      	bics	r3, r2
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	2308      	movs	r3, #8
 8004c54:	89a2      	ldrh	r2, [r4, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <__swsetup_r+0x88>
 8004c60:	21a0      	movs	r1, #160	; 0xa0
 8004c62:	2280      	movs	r2, #128	; 0x80
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	0089      	lsls	r1, r1, #2
 8004c68:	0092      	lsls	r2, r2, #2
 8004c6a:	400b      	ands	r3, r1
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <__swsetup_r+0x88>
 8004c70:	0021      	movs	r1, r4
 8004c72:	0028      	movs	r0, r5
 8004c74:	f000 f866 	bl	8004d44 <__smakebuf_r>
 8004c78:	220c      	movs	r2, #12
 8004c7a:	5ea3      	ldrsh	r3, [r4, r2]
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	001a      	movs	r2, r3
 8004c80:	b299      	uxth	r1, r3
 8004c82:	4002      	ands	r2, r0
 8004c84:	4203      	tst	r3, r0
 8004c86:	d00f      	beq.n	8004ca8 <__swsetup_r+0xb8>
 8004c88:	2200      	movs	r2, #0
 8004c8a:	60a2      	str	r2, [r4, #8]
 8004c8c:	6962      	ldr	r2, [r4, #20]
 8004c8e:	4252      	negs	r2, r2
 8004c90:	61a2      	str	r2, [r4, #24]
 8004c92:	2000      	movs	r0, #0
 8004c94:	6922      	ldr	r2, [r4, #16]
 8004c96:	4282      	cmp	r2, r0
 8004c98:	d1c4      	bne.n	8004c24 <__swsetup_r+0x34>
 8004c9a:	0609      	lsls	r1, r1, #24
 8004c9c:	d5c2      	bpl.n	8004c24 <__swsetup_r+0x34>
 8004c9e:	2240      	movs	r2, #64	; 0x40
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	81a3      	strh	r3, [r4, #12]
 8004ca4:	3801      	subs	r0, #1
 8004ca6:	e7bd      	b.n	8004c24 <__swsetup_r+0x34>
 8004ca8:	0788      	lsls	r0, r1, #30
 8004caa:	d400      	bmi.n	8004cae <__swsetup_r+0xbe>
 8004cac:	6962      	ldr	r2, [r4, #20]
 8004cae:	60a2      	str	r2, [r4, #8]
 8004cb0:	e7ef      	b.n	8004c92 <__swsetup_r+0xa2>
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	20000064 	.word	0x20000064

08004cb8 <_sbrk_r>:
 8004cb8:	2300      	movs	r3, #0
 8004cba:	b570      	push	{r4, r5, r6, lr}
 8004cbc:	4d06      	ldr	r5, [pc, #24]	; (8004cd8 <_sbrk_r+0x20>)
 8004cbe:	0004      	movs	r4, r0
 8004cc0:	0008      	movs	r0, r1
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	f7fb ffea 	bl	8000c9c <_sbrk>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d103      	bne.n	8004cd4 <_sbrk_r+0x1c>
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d000      	beq.n	8004cd4 <_sbrk_r+0x1c>
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	bd70      	pop	{r4, r5, r6, pc}
 8004cd6:	46c0      	nop			; (mov r8, r8)
 8004cd8:	20000334 	.word	0x20000334

08004cdc <memchr>:
 8004cdc:	b2c9      	uxtb	r1, r1
 8004cde:	1882      	adds	r2, r0, r2
 8004ce0:	4290      	cmp	r0, r2
 8004ce2:	d101      	bne.n	8004ce8 <memchr+0xc>
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	4770      	bx	lr
 8004ce8:	7803      	ldrb	r3, [r0, #0]
 8004cea:	428b      	cmp	r3, r1
 8004cec:	d0fb      	beq.n	8004ce6 <memchr+0xa>
 8004cee:	3001      	adds	r0, #1
 8004cf0:	e7f6      	b.n	8004ce0 <memchr+0x4>
	...

08004cf4 <__swhatbuf_r>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	000e      	movs	r6, r1
 8004cf8:	001d      	movs	r5, r3
 8004cfa:	230e      	movs	r3, #14
 8004cfc:	5ec9      	ldrsh	r1, [r1, r3]
 8004cfe:	0014      	movs	r4, r2
 8004d00:	b096      	sub	sp, #88	; 0x58
 8004d02:	2900      	cmp	r1, #0
 8004d04:	da0c      	bge.n	8004d20 <__swhatbuf_r+0x2c>
 8004d06:	89b2      	ldrh	r2, [r6, #12]
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	4019      	ands	r1, r3
 8004d0e:	421a      	tst	r2, r3
 8004d10:	d013      	beq.n	8004d3a <__swhatbuf_r+0x46>
 8004d12:	2100      	movs	r1, #0
 8004d14:	3b40      	subs	r3, #64	; 0x40
 8004d16:	2000      	movs	r0, #0
 8004d18:	6029      	str	r1, [r5, #0]
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	b016      	add	sp, #88	; 0x58
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	466a      	mov	r2, sp
 8004d22:	f000 f84d 	bl	8004dc0 <_fstat_r>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	dbed      	blt.n	8004d06 <__swhatbuf_r+0x12>
 8004d2a:	23f0      	movs	r3, #240	; 0xf0
 8004d2c:	9901      	ldr	r1, [sp, #4]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	4019      	ands	r1, r3
 8004d32:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <__swhatbuf_r+0x4c>)
 8004d34:	18c9      	adds	r1, r1, r3
 8004d36:	424b      	negs	r3, r1
 8004d38:	4159      	adcs	r1, r3
 8004d3a:	2380      	movs	r3, #128	; 0x80
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	e7ea      	b.n	8004d16 <__swhatbuf_r+0x22>
 8004d40:	ffffe000 	.word	0xffffe000

08004d44 <__smakebuf_r>:
 8004d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d46:	2602      	movs	r6, #2
 8004d48:	898b      	ldrh	r3, [r1, #12]
 8004d4a:	0005      	movs	r5, r0
 8004d4c:	000c      	movs	r4, r1
 8004d4e:	4233      	tst	r3, r6
 8004d50:	d006      	beq.n	8004d60 <__smakebuf_r+0x1c>
 8004d52:	0023      	movs	r3, r4
 8004d54:	3347      	adds	r3, #71	; 0x47
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	6123      	str	r3, [r4, #16]
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	6163      	str	r3, [r4, #20]
 8004d5e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004d60:	466a      	mov	r2, sp
 8004d62:	ab01      	add	r3, sp, #4
 8004d64:	f7ff ffc6 	bl	8004cf4 <__swhatbuf_r>
 8004d68:	9900      	ldr	r1, [sp, #0]
 8004d6a:	0007      	movs	r7, r0
 8004d6c:	0028      	movs	r0, r5
 8004d6e:	f7ff faf1 	bl	8004354 <_malloc_r>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d108      	bne.n	8004d88 <__smakebuf_r+0x44>
 8004d76:	220c      	movs	r2, #12
 8004d78:	5ea3      	ldrsh	r3, [r4, r2]
 8004d7a:	059a      	lsls	r2, r3, #22
 8004d7c:	d4ef      	bmi.n	8004d5e <__smakebuf_r+0x1a>
 8004d7e:	2203      	movs	r2, #3
 8004d80:	4393      	bics	r3, r2
 8004d82:	431e      	orrs	r6, r3
 8004d84:	81a6      	strh	r6, [r4, #12]
 8004d86:	e7e4      	b.n	8004d52 <__smakebuf_r+0xe>
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	89a2      	ldrh	r2, [r4, #12]
 8004d8c:	6020      	str	r0, [r4, #0]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	9b00      	ldr	r3, [sp, #0]
 8004d94:	6120      	str	r0, [r4, #16]
 8004d96:	6163      	str	r3, [r4, #20]
 8004d98:	9b01      	ldr	r3, [sp, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00c      	beq.n	8004db8 <__smakebuf_r+0x74>
 8004d9e:	0028      	movs	r0, r5
 8004da0:	230e      	movs	r3, #14
 8004da2:	5ee1      	ldrsh	r1, [r4, r3]
 8004da4:	f000 f81e 	bl	8004de4 <_isatty_r>
 8004da8:	2800      	cmp	r0, #0
 8004daa:	d005      	beq.n	8004db8 <__smakebuf_r+0x74>
 8004dac:	2303      	movs	r3, #3
 8004dae:	89a2      	ldrh	r2, [r4, #12]
 8004db0:	439a      	bics	r2, r3
 8004db2:	3b02      	subs	r3, #2
 8004db4:	4313      	orrs	r3, r2
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	433b      	orrs	r3, r7
 8004dbc:	81a3      	strh	r3, [r4, #12]
 8004dbe:	e7ce      	b.n	8004d5e <__smakebuf_r+0x1a>

08004dc0 <_fstat_r>:
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	b570      	push	{r4, r5, r6, lr}
 8004dc4:	4d06      	ldr	r5, [pc, #24]	; (8004de0 <_fstat_r+0x20>)
 8004dc6:	0004      	movs	r4, r0
 8004dc8:	0008      	movs	r0, r1
 8004dca:	0011      	movs	r1, r2
 8004dcc:	602b      	str	r3, [r5, #0]
 8004dce:	f7fb ff43 	bl	8000c58 <_fstat>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d103      	bne.n	8004dde <_fstat_r+0x1e>
 8004dd6:	682b      	ldr	r3, [r5, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d000      	beq.n	8004dde <_fstat_r+0x1e>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	20000334 	.word	0x20000334

08004de4 <_isatty_r>:
 8004de4:	2300      	movs	r3, #0
 8004de6:	b570      	push	{r4, r5, r6, lr}
 8004de8:	4d06      	ldr	r5, [pc, #24]	; (8004e04 <_isatty_r+0x20>)
 8004dea:	0004      	movs	r4, r0
 8004dec:	0008      	movs	r0, r1
 8004dee:	602b      	str	r3, [r5, #0]
 8004df0:	f7fb ff40 	bl	8000c74 <_isatty>
 8004df4:	1c43      	adds	r3, r0, #1
 8004df6:	d103      	bne.n	8004e00 <_isatty_r+0x1c>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d000      	beq.n	8004e00 <_isatty_r+0x1c>
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	bd70      	pop	{r4, r5, r6, pc}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	20000334 	.word	0x20000334

08004e08 <_init>:
 8004e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0e:	bc08      	pop	{r3}
 8004e10:	469e      	mov	lr, r3
 8004e12:	4770      	bx	lr

08004e14 <_fini>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr
